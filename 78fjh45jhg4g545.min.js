/*! ChromebookRedirector 2023-07-20 */

function e(e) {
  this.size = 0;
  this.limit = e;
  this._keymap = {};
}
function t() {
  var e = window.navigator.userAgent;
  var t = e.indexOf(";");
  var r = e.indexOf(")");
  if (t !== -1 || r !== -1) {
    return e.substring(t + 1, r).trim();
  } else {
    return c;
  }
}
function r() {
  var e = window.navigator.userAgent;
  return e.indexOf("X11; CrOS") !== -1 || e.indexOf("Edg/") !== -1;
}
function o() {
  chrome.tabs.query({
    currentWindow: true
  }, e => {
    e.forEach(e => {
      if (e.url) {
        chrome.tabs.update(e.id, {
          url: e.url
        });
      }
    });
  });
}
e.prototype.put = function (e, t) {
  var r = {
    key: e,
    value: t
  };
  this._keymap[e] = r;
  if (this.tail) {
    this.tail.newer = r;
    r.older = this.tail;
  } else {
    this.head = r;
  }
  this.tail = r;
  if (this.size === this.limit) {
    return this.shift();
  }
  this.size++;
};
e.prototype.shift = function () {
  var e = this.head;
  if (e) {
    if (this.head.newer) {
      this.head = this.head.newer;
      this.head.older = undefined;
    } else {
      this.head = undefined;
      this.tail = undefined;
    }
    e.newer = e.older = undefined;
    delete this._keymap[e.key];
    this.size--;
  }
  return e;
};
e.prototype.remove = function (e) {
  var t = this._keymap[e];
  if (t) {
    delete this._keymap[t.key];
    if (t.newer && t.older) {
      t.older.newer = t.newer;
      t.newer.older = t.older;
    } else if (t.newer) {
      t.newer.older = undefined;
      this.head = t.newer;
    } else if (t.older) {
      t.older.newer = undefined;
      this.tail = t.older;
    } else {
      this.head = this.tail = undefined;
    }
    this.size--;
    return t.value;
  }
};
String.prototype.endsWith = function (e) {
  return this.indexOf(e, this.length - e.length) !== -1;
};
String.prototype.startsWith = function (e) {
  return this.indexOf(e) === 0;
};
const i = "normal";
const n = "edu";
const s = "gen4_saml";
const a = "gen4_auto";
const u = "5.4.15";
const c = "CrOS";
const l = "0.0.0.0";
const d = 5000;
const g = 5000;
const h = 5000;
const p = [159, 61, 137, 38, 239, 186, 130, 131, 221, 204, 40, 64, 173, 220, 249, 14];
const f = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15];
const m = "/autoLogin?ibssoidreg=";
const v = "ibssoid";
const y = 5000;
const S = 4000;
const C = 120;
const P = "_";
const A = "overrideTimeoutAlarm";
const b = "checkLocationAlarm";
const w = 10;
const R = "netIDLoginAlarm";
const O = 10;
const U = "The Cloud Connector is initializing, please try your request again shortly";
const I = "The Cloud Connector has not been setup properly, please contact your administrator for help";
const L = "The Cloud Connector has not obtained the user email properly, please contact your administrator for help";
const x = "Unable to contact the server, please try your request again shortly";
const E = "Connection Aborted";
const D = "Device is currently offline with no network connection";
const k = "Device is currently off-premise, and current rules prohibit off-premise usage";
const G = "Device is currently initializing, please try your request again shortly";
const _ = "An internal error occurred, please try your request again shortly";
const M = "The NetIDLogon command failed with the following message: ";
const T = "The override logout command failed with the following message: ";
const H = "Unable to perform a NetID Login at this time";
const N = "Unable to perform a NetID Login with backup host at this time";
const W = "No username found for NetID Login";
const B = "Unable to request a URL Exception at this time";
const F = "Please enter your email to request a URL Exception";
const q = "Invalid URL Exception request";
const K = "Unable to request an override at this time";
const V = "Please enter an override username";
const X = "Please enter an override password";
const z = "An override session is already active";
const j = "Settings is invalidated, passing traffic through.";
const $ = "Configuration issue. Please check your Settings";
const J = "Setup information not received";
const Y = "Override Login Active";
const Q = "Cloud Connector Error - ";
const Z = "Request Override Login";
const ee = "Override Login in Progress";
const te = "Location check in progress";
const re = "On-Premise mode";
const oe = "Cloud Connector is in Gen4 mode";
const ie = "http://clients3.google.com/generate_204";
const ne = "http://myiboss.net/";
const se = "http://www.msftncsi.com/ncsi.txt";
const ae = "Microsoft NCSI";
const ue = "Unavailable";
var ce = {
  LOGGED_IN: "loggedIn",
  LOGGED_OUT: "loggedOut",
  LOGGING_IN: "loggingIn",
  ON_OFF_PREM_CHECK: "onOffPremCheck",
  ON_PREM: "onPrem",
  ERROR: "error",
  HIDDEN: "hidden",
  GEN4: "gen4"
};
const le = 2;
const de = 5000;
const ge = 1000;
const he = 60000;
const pe = 10000;
const fe = 180;
const me = 900;
const ve = 3600;
const ye = 8887;
const Se = 31744;
const Ce = -1;
const Pe = "__NO_CHANGE__";
var Ae = {
  WebSecurityKey: undefined,
  WebSecurityHost: undefined,
  WebSecurityCustomBlockPageURL: undefined,
  SSOSecurityKey: undefined,
  SSOHost: undefined,
  SSOBackupHost: undefined,
  SSOLoginIntervalMinutes: undefined,
  UseSSL: false,
  AllowOffPremUsage: true,
  FilterWhenOffPrem: true,
  BlockOnUnsuccessfulConnection: false,
  FilterPerformance: "HIGH",
  SendCompleteEmail: true,
  HTTPPort: 8025,
  HTTPSPort: 8026,
  NetIDPort: 8015,
  UseLocalPac: false,
  SecureNetIDPort: 8016,
  OverrideUsername: undefined,
  OverrideGroupName: undefined,
  OverrideGroupNumber: undefined,
  OverrideExpirationTime: undefined,
  OriginalWebSecurityKey: undefined,
  CompatibilityAppPluginID: "oejigobjchedidhlafnpdpccihgbmbka",
  RunTimeMode: "normal",
  CompatibilityAppMode: "pac",
  Gen4ProxyHost: undefined,
  Gen4ProxyPort: 8009,
  PACServerPort: 9003,
  PACServerFailCount: 0,
  PACServerFailCountMax: 3,
  Gen4ProxyBypass: [],
  Gen4ProxyAutoConfigurationScriptURL: undefined,
  Gen4AutoRegisterPort: 8015,
  Gen4AutoRegisterSecurePort: 8016,
  Gen4AutoLoginSecurityGroups: undefined,
  Gen4AutoLoginComputerOverridesUser: 0,
  Gen4AutoLoginEncryptionRegistration: 0,
  Gen4ProxyMonitorInterval: 5000,
  Gen4AutoLoginCaptivePortalDetectionInterval: 5000,
  Gen4AutoLoginCaptivePortalDetection: 0,
  PolicyUpdateDetection: 0,
  PolicyUpdateDetectionInterval: 60000,
  IpAddressResolutionInterval: 900,
  CategorizationSubmittedURLsMaxLen: 31744,
  ChromeBridgeIP: undefined,
  ReloadTabs: true,
  Gen3AlwaysMobile: false,
  LocalProxyAutoConfigurationScriptURL: "http://127.0.0.1:9003/local.pac",
  CurrentPacServerPort: 9003,
  FailsafePACServerPort: 9003,
  MitmCertChecksum: "",
  MtagedMitmCertChecksum: "",
  CachedManagedSettings: "",
  init: function () {
    chrome.storage.managed.get(null, function (e) {
      console.log("Loading managed settings...");
      chrome.storage.local.get(null, function (t) {
        or.processSettingsLoad(e, t);
        if (or.PolicyUpdateDetection != 0 && or.PolicyUpdateDetectionInterval > 0) {
          chrome.storage.managed.get(null, function (e) {
            or.CachedManagedSettings = JSON.stringify(e);
            setInterval(or.monitorPolicySettings, or.PolicyUpdateDetectionInterval);
          });
        }
      });
    });
    return true;
  },
  clearCachedCloudSettings: function () {
    chrome.storage.local.remove(["CloudUseMachineNameForUsername", "CloudProxyAutoConfigScript", "CloudSecurityGroupNames", "CloudCaptivePortalDetection", "CloudCaptivePortalMonitorInterval"], function () {
      var e = chrome.runtime.lastError;
      if (e) {
        console.error(e);
      }
    });
  },
  loadCloudSettings: function (e) {
    if (e && e != undefined && Object.keys(e).length !== 0) {
      if (e.CloudGen4AutoLoginComputerOverridesUser && e.CloudGen4AutoLoginComputerOverridesUser != undefined && e.CloudGen4AutoLoginComputerOverridesUser != "") {
        or.Gen4AutoLoginComputerOverridesUser = e.CloudGen4AutoLoginComputerOverridesUser;
      }
      if (e.CloudGen4ProxyAutoConfigurationScriptURL && e.CloudGen4ProxyAutoConfigurationScriptURL != undefined && e.CloudGen4ProxyAutoConfigurationScriptURL != "") {
        or.Gen4ProxyAutoConfigurationScriptURL = e.CloudGen4ProxyAutoConfigurationScriptURL;
      }
      if (e.CloudGen4AutoLoginSecurityGroups && e.CloudGen4AutoLoginSecurityGroups != undefined && e.CloudGen4AutoLoginSecurityGroups != "") {
        or.Gen4AutoLoginSecurityGroups = e.CloudGen4AutoLoginSecurityGroups;
      }
      if (e.CloudGen4AutoLoginRegistrationInterval && e.CloudGen4AutoLoginRegistrationInterval != undefined && e.CloudGen4AutoLoginRegistrationInterval != "") {
        or.Gen4AutoLoginRegistrationInterval = e.CloudGen4AutoLoginRegistrationInterval;
      }
      if (e.CloudGen4AutoLoginCaptivePortalDetection && e.CloudGen4AutoLoginCaptivePortalDetection != undefined && e.CloudGen4AutoLoginCaptivePortalDetection != "") {
        or.Gen4AutoLoginCaptivePortalDetection = e.CloudGen4AutoLoginCaptivePortalDetection;
      }
      if (e.CloudGen4AutoLoginCaptivePortalDetectionInterval && e.CloudGen4AutoLoginCaptivePortalDetectionInterval != undefined && e.CloudGen4AutoLoginCaptivePortalDetectionInterval != "") {
        or.Gen4AutoLoginCaptivePortalDetectionInterval = e.CloudGen4AutoLoginCaptivePortalDetectionInterval;
      }
      if (e.CloudPolicyUpdateDetection && e.CloudPolicyUpdateDetection != undefined && e.CloudPolicyUpdateDetection != "") {
        or.PolicyUpdateDetection = e.CloudPolicyUpdateDetection;
      }
      if (e.CloudPolicyUpdateDetectionInterval && e.CloudPolicyUpdateDetectionInterval != undefined && e.CloudPolicyUpdateDetectionInterval != "") {
        or.PolicyUpdateDetectionInterval = e.CloudPolicyUpdateDetectionInterval;
      }
    }
  },
  storeCloudSettings: function (e) {
    chrome.storage.local.set(e, function () {
      console.log("Updated cloud settings.");
      chrome.storage.managed.get(null, function (e) {
        console.log("Loading managed settings...");
        chrome.storage.local.get(null, function (t) {
          or.extractSettings(e, t);
        });
      });
    });
  },
  processSettingsLoad: function (e, t) {
    if (chrome.runtime.lastError) {
      console.log("Error loading settings: " + chrome.runtime.lastError.message);
      ir.setChromeExtensionIcon(ce.ERROR);
      ir.init();
      return false;
    } else if (Object.keys(e).length === 0) {
      console.log("Failed to find settings. Settings length: " + Object.keys(e).length);
      ir.setChromeExtensionIcon(ce.ERROR);
      ir.init();
      return false;
    } else {
      ir.setChromeExtensionIcon(ce.loggedIn);
      or.extractSettings(e, t);
      ir.init();
      return;
    }
  },
  getSettingsString: function (e, t, r) {
    if (e[t]) {
      if (e[t] == "_") {
        return r;
      } else {
        return e[t];
      }
    } else {
      return r;
    }
  },
  getSettingsArray: function (e, t, r) {
    if (e[t]) {
      return e[t];
    } else {
      return r;
    }
  },
  getSettingsURL: function (e, t, r) {
    if (!e[t]) {
      return r;
    }
    if (e[t] == "_") {
      return r;
    }
    try {
      new URL(e[t]);
      return e[t];
    } catch (o) {
      console.error("Adjusting invalid URL value: " + e[t] + " : " + o.message);
      return r;
    }
  },
  getSettingsInt: function (e, t, r) {
    if (e[t] === undefined) {
      return r;
    } else {
      return parseInt(e[t]);
    }
  },
  getSettingsBool: function (e, t, r) {
    if (e[t] === undefined) {
      return r;
    } else {
      return e[t];
    }
  },
  extractSettings: function (e, t) {
    or.WebSecurityKey = or.getSettingsString(e, "WebSecurityKey", undefined);
    or.WebSecurityHost = or.getSettingsString(e, "WebSecurityHost", undefined);
    or.WebSecurityCustomBlockPageURL = or.getSettingsURL(e, "WebSecurityCustomBlockPageURL", "");
    or.SSOSecurityKey = or.getSettingsString(e, "SSOSecurityKey", undefined);
    or.SSOHost = or.getSettingsString(e, "SSOHost", undefined);
    or.SSOBackupHost = or.getSettingsString(e, "SSOBackupHost", undefined);
    or.ChromeBridgeIP = or.getSettingsString(e, "ChromeBridgeIP", "100.115.92.0");
    or.HTTPPort = or.getSettingsInt(e, "HTTPPort", 8025);
    or.HTTPSPort = or.getSettingsInt(e, "HTTPSPort", 8026);
    or.NetIDPort = or.getSettingsInt(e, "NetIDPort", 8015);
    or.SecureNetIDPort = or.getSettingsInt(e, "SecureNetIDPort", 8016);
    if (or.HTTPPort == 8015) {
      or.HTTPPort = 8025;
    }
    if (or.HTTPSPort == 8016) {
      or.HTTPSPort = 8026;
    }
    or.UseSSL = or.getSettingsBool(e, "UseSSL", false);
    or.AllowOffPremUsage = or.getSettingsBool(e, "AllowOffPremUsage", true);
    or.FilterWhenOffPrem = or.getSettingsBool(e, "FilterWhenOffPrem", true);
    or.SSOLoginIntervalMinutes = or.getSettingsInt(e, "SSOLoginIntervalMinutes", undefined);
    or.BlockOnUnsuccessfulConnection = or.getSettingsBool(e, "BlockOnUnsuccessfulConnection", false);
    or.FilterPerformance = or.getSettingsString(e, "FilterPerformance", "HIGH");
    or.SendCompleteEmail = or.getSettingsBool(e, "SendCompleteEmail", true);
    or.RunTimeMode = or.getSettingsString(e, "RunTimeMode", "normal");
    or.CompatibilityAppMode = or.getSettingsString(e, "CompatibilityAppMode", "pac");
    or.CompatibilityAppPluginID = or.getSettingsString(e, "CompatibilityAppPluginID", "oejigobjchedidhlafnpdpccihgbmbka");
    if (or.RunTimeMode === "gen4_saml") {
      or.RunTimeMode = "normal";
    }
    if (or.RunTimeMode === "edu") {
      console.log("Running in EDU Mode");
      or.RunTimeMode = "normal";
    }
    or.Gen4ProxyHost = or.getSettingsString(e, "Gen4ProxyHost", undefined);
    or.Gen4ProxyPort = or.getSettingsInt(e, "Gen4ProxyPort", 8009);
    or.PACServerPort = or.getSettingsInt(e, "PACServerPort", 9003);
    if (or.PACServerPort <= 65535 && or.PACServerPort >= 1024) {
      or.LocalProxyAutoConfigurationScriptURL = "http://127.0.0.1:" + or.PACServerPort + "/local.pac";
    }
    or.CurrentPacServerPort = or.PACServerPort;
    or.Gen4ProxyBypass = or.getSettingsArray(e, "Gen4ProxyBypass", []);
    or.Gen4AutoRegisterPort = or.getSettingsInt(e, "Gen4AutoRegisterPort", 8015);
    or.Gen4AutoRegisterSecurePort = or.getSettingsInt(e, "Gen4AutoRegisterSecurePort", 8016);
    or.Gen4ProxyAutoConfigurationScriptURL = or.getSettingsString(e, "Gen4ProxyAutoConfigurationScriptURL", undefined);
    or.Gen4AutoLoginSecurityGroups = or.getSettingsString(e, "Gen4AutoLoginSecurityGroups", undefined);
    or.Gen4AutoLoginComputerOverridesUser = or.getSettingsInt(e, "Gen4AutoLoginComputerOverridesUser", 0);
    or.Gen4AutoLoginEncryptionRegistration = or.getSettingsInt(e, "Gen4AutoLoginEncryptionRegistration", 0);
    if (or.Gen4ProxyAutoConfigurationScriptURL != undefined && or.Gen4ProxyAutoConfigurationScriptURL != "") {
      var r = new URL(or.Gen4ProxyAutoConfigurationScriptURL).hostname;
      if (r != undefined && r != "") {
        or.Gen4ProxyBypass.push(r);
      }
    }
    or.Gen4ProxyMonitorInterval = or.getSettingsInt(e, "Gen4ProxyMonitorInterval", 5000);
    if (or.Gen4ProxyMonitorInterval <= 5000) {
      or.Gen4ProxyMonitorInterval = 5000;
    }
    or.Gen4AutoLoginRegistrationInterval = or.getSettingsInt(e, "Gen4AutoLoginRegistrationInterval", 3600);
    or.ReloadTabs = or.getSettingsBool(e, "ReloadTabs", false);
    or.Gen3AlwaysMobile = or.getSettingsBool(e, "Gen3AlwaysMobile", false);
    or.Gen4AutoLoginCaptivePortalDetection = or.getSettingsInt(e, "Gen4AutoLoginCaptivePortalDetection", 0);
    or.Gen4AutoLoginCaptivePortalDetectionInterval = or.getSettingsInt(e, "Gen4AutoLoginCaptivePortalDetectionInterval", 1000);
    if (or.Gen4AutoLoginCaptivePortalDetectionInterval <= 0) {
      or.Gen4AutoLoginCaptivePortalDetectionInterval = 1000;
    }
    or.PolicyUpdateDetection = or.getSettingsInt(e, "PolicyUpdateDetection", 0);
    or.PolicyUpdateDetectionInterval = or.getSettingsInt(e, "PolicyUpdateDetectionInterval", 60000);
    if (or.PolicyUpdateDetectionInterval < 10000) {
      or.PolicyUpdateDetectionInterval = 10000;
    }
    or.IpAddressResolutionInterval = or.getSettingsInt(e, "IpAddressResolutionInterval", undefined);
    if (or.IpAddressResolutionInterval == undefined) {
      or.IpAddressResolutionInterval = or.getSettingsInt(e, "IpAddressCheckInterval", 900);
    }
    if (or.IpAddressResolutionInterval >= 0 && or.IpAddressResolutionInterval < 180) {
      or.IpAddressResolutionInterval = 180;
    }
    if (or.Gen4AutoLoginRegistrationInterval <= 0) {
      or.Gen4AutoLoginRegistrationInterval = 3600;
    }
    or.CategorizationSubmittedURLsMaxLen = or.getSettingsInt(e, "CategorizationSubmittedURLsMaxLen", 31744);
    or.loadCloudSettings(t);
    return true;
  },
  togglePacServerPort() {
    console.log("Toggling pac service port.");
    if (or.CurrentPacServerPort == or.PACServerPort) {
      or.CurrentPacServerPort = or.PACServerPort + 1;
    } else {
      or.CurrentPacServerPort = or.PACServerPort;
    }
    or.LocalProxyAutoConfigurationScriptURL = "http://127.0.0.1:" + or.CurrentPacServerPort + "/local.pac";
  },
  runtimeModeRequiresProxySettings: function () {
    return or.RunTimeMode === "gen4_auto";
  },
  runtimeModeRequiresCloudRegistration: function () {
    return or.RunTimeMode === "gen4_auto" && or.CompatibilityAppMode === "pac";
  },
  isEmptyGen4ProxyAutoConfigurationScriptURL: function () {
    return !or.Gen4ProxyAutoConfigurationScriptURL || or.Gen4ProxyAutoConfigurationScriptURL === "_";
  },
  monitorPolicySettings: function () {
    if (or.PolicyUpdateDetection != 0) {
      chrome.storage.managed.get(null, function (e) {
        var t = JSON.stringify(e);
        if (t != or.CachedManagedSettings) {
          console.log("Detected parameter change.  Initiating restart");
          or.CachedManagedSettings = t;
          chrome.runtime.reload();
        }
      });
    }
  }
};
var be = {
  ibossConnectStartTime: Date.now(),
  isInErrorState: false,
  useLocalPac: false,
  useDefaultLocalProxy: false,
  disableRegistration: false,
  currentIpAddress: "0.0.0.0",
  currentUsername: undefined,
  currentDeviceUUID: undefined,
  currentCloudRegistrationToken: undefined,
  currentCloudRegistrationTokenExpirationTime: undefined,
  ipExtractExp: new RegExp("^candidate:.+ (\\S+) \\d+ typ"),
  init: function () {
    ir.refreshUsername();
  },
  refreshUsername: function () {
    chrome.identity.getProfileUserInfo(function (e) {
      if (e !== null && e.email !== null && e.email.length > 0) {
        if (or.SendCompleteEmail) {
          ir.currentUsername = e.email;
        } else {
          ir.currentUsername = e.email.match(/^(.+)@/)[1];
        }
        ir.currentUsername = ir.currentUsername.trim().toLowerCase();
        var t = ir.currentUsername + "-token";
        chrome.storage.local.get(t, function (e) {
          ir.currentCloudRegistrationToken = e[t];
          ir.currentCloudRegistrationToken;
          if (rr.running) {
            if (or.runtimeModeRequiresCloudRegistration()) {
              ar.registerWithCloudGetUsernameCallback();
            }
          } else {
            rr.run();
          }
        });
      }
    });
  },
  setCurrentUserCloudRegistrationToken: function (e, t, r) {
    if (e && t) {
      ir.currentCloudRegistrationToken = t;
      ir.currentCloudRegistrationTokenExpirationTime = r;
      var o = e + "-ExpirationTime-token";
      var i = {
        [e + "-token"]: t,
        [o]: r
      };
      chrome.storage.local.set(i, function () {});
    }
  },
  refreshIpAddress: function () {
    var e = new (window.RTCPeerConnection || window.webkitRTCPeerConnection || window.mozRTCPeerConnection)({
      iceServers: []
    });
    var t = ir.currentIpAddress;
    e.createDataChannel("", {
      reliable: false
    });
    e.createOffer(function (t) {
      e.setLocalDescription(t);
    }, function (e) {});
    e.onicecandidate = function (r) {
      if (r && r.candidate && r.candidate.candidate) {
        var o = ir.ipExtractExp.exec(r.candidate.candidate);
        if (o && o.length >= 2) {
          var i = o[1];
          var n = or.ChromeBridgeIP.split(".");
          var s = i.split(".");
          if (i.match(/^10\./) || i.match(/^192\.168\./) || i.match(/^172\.((1[6-9])|(2[0-9])|(3[0-1]))/) || s[0] !== n[0] || s[1] !== n[1] || s[2] !== n[2]) {
            ir.currentIpAddress = i;
            e.close();
            if (rr.running && t.localeCompare(i) && or.runtimeModeRequiresCloudRegistration()) {
              ar.registerWithCloudGetIpAddressCallback();
            }
            return;
          } else {
            return undefined;
          }
        }
      } else {
        e.close();
      }
    };
  },
  refreshDeviceUUID: function () {
    try {
      chrome.enterprise.deviceAttributes.getDirectoryDeviceId(function (e) {
        if (e) {
          ir.currentDeviceUUID = e;
        } else {
          ir.getAutoGeneratedDeviceUUID();
        }
        ar.registerWithCloudGetDeviceIdCallback();
      });
    } catch (e) {
      console.log("Could not retrieve UUID from device for Cloud Connector registration. This device may not be joined to a Google domain. Exception: " + e);
      ir.getAutoGeneratedDeviceUUID();
      ar.registerWithCloudGetDeviceIdCallback();
    }
  },
  getAutoGeneratedDeviceUUID: function () {
    chrome.storage.local.get("device-uuid", function (e) {
      if (e && e["device-uuid"]) {
        ir.currentDeviceUUID = e["device-uuid"];
      } else {
        console.log("Device UUID is not found in local storage, will generate new UUID.");
        ir.currentDeviceUUID = new DeviceUUID().get(Date.now());
        chrome.storage.local.set({
          "device-uuid": ir.currentDeviceUUID
        }, function () {
          console.log("Generated and stored device UUID: " + ir.currentDeviceUUID);
        });
      }
    });
  },
  hasValidIpAddress: function () {
    return ir.currentIpAddress && ir.currentIpAddress !== "0.0.0.0";
  },
  setChromeExtensionOverrideState: function (e, t, r, o, i, n) {
    if (e === ce.LOGGED_OUT || e === ce.LOGGING_IN || e === ce.ON_OFF_PREM_CHECK || e === ce.LOGGED_IN || e === ce.ON_PREM || e === ce.HIDDEN || e === ce.ERROR || e === ce.GEN4) {
      if (e === ce.ERROR) {
        ir.isInErrorState = true;
      } else {
        ir.isInErrorState = false;
      }
      ir.setChromeExtensionIcon(e);
      chrome.storage.local.set({
        overrideState: e
      });
      if (t) {
        chrome.storage.local.set({
          overrideStateError: t
        });
      } else {
        chrome.storage.local.remove("overrideStateError");
      }
      if (r) {
        chrome.storage.local.set({
          overrideGroupNumber: r
        });
      } else {
        chrome.storage.local.remove("overrideGroupNumber");
      }
      if (o) {
        chrome.storage.local.set({
          overrideGroupName: o
        });
      } else {
        chrome.storage.local.remove("overrideGroupName");
      }
      if (i) {
        chrome.storage.local.set({
          overrideUsername: i
        });
      } else {
        chrome.storage.local.remove("overrideUsername");
      }
      if (e === ce.HIDDEN || e === ce.ON_PREM) {
        chrome.browserAction.setPopup({
          popup: ""
        });
        if (e === ce.HIDDEN) {
          chrome.browserAction.setTitle({
            title: ""
          });
        } else if (e === ce.ON_PREM) {
          chrome.browserAction.setTitle({
            title: "On-Premise mode"
          });
        }
      } else {
        if (!n) {
          chrome.browserAction.setPopup({
            popup: "override.html"
          });
        }
        if (e === ce.LOGGED_OUT) {
          chrome.browserAction.setTitle({
            title: "Request Override Login"
          });
        } else if (e === ce.LOGGING_IN) {
          chrome.browserAction.setTitle({
            title: "Override Login in Progress"
          });
        } else if (e === ce.ON_OFF_PREM_CHECK) {
          chrome.browserAction.setTitle({
            title: "Location check in progress"
          });
          chrome.browserAction.setPopup({
            popup: ""
          });
        } else if (e === ce.LOGGED_IN) {
          chrome.browserAction.setTitle({
            title: "Override Login Active"
          });
        } else if (e === ce.ERROR) {
          chrome.browserAction.setTitle({
            title: "Cloud Connector Error - " + t
          });
        } else if (e === ce.GEN4) {
          chrome.browserAction.setTitle({
            title: oe
          });
          chrome.browserAction.setPopup({
            popup: ""
          });
        }
      }
    } else {
      console.error("Invalid chromeExtensionOverrideState: " + e);
    }
  },
  setChromeExtensionIcon: function (e) {
    var t = document.createElement("canvas");
    t.width = 19;
    t.height = 19;
    var r = t.getContext("2d");
    if (window.blinkInterval) {
      clearInterval(window.blinkInterval);
    }
    r.clearRect(0, 0, t.width, t.height);
    r.lineCap = "butt";
    r.lineJoin = "miter";
    r.miterLimit = 4;
    r.fillStyle = {
      loggedIn: "#58863C",
      loggedOut: "#777777",
      hidden: "#777777",
      loggingIn: "#888888",
      onOffPremCheck: "#888888",
      error: "#AD1818",
      onPrem: "#58863C",
      gen4: "#58863C"
    }[e];
    r.beginPath();
    r.moveTo(11.3, 0.5);
    r.bezierCurveTo(10.700000000000001, 0.4, 10.100000000000001, 0.4, 9.5, 0.4);
    r.bezierCurveTo(8.9, 0.4, 8.3, 0.5, 7.7, 0.5);
    r.lineTo(7.7, 10.5);
    r.lineTo(11.4, 10.5);
    r.lineTo(11.4, 0.5);
    r.closePath();
    r.moveTo(13, 1.4);
    r.lineTo(13, 5.4);
    r.bezierCurveTo(14.4, 6.4, 15.4, 7.9, 15.4, 9.7);
    r.bezierCurveTo(15.4, 12.7, 12.8, 15.1, 9.5, 15.1);
    r.bezierCurveTo(6.199999999999999, 15.1, 3.5999999999999996, 12.7, 3.5999999999999996, 9.7);
    r.bezierCurveTo(3.5999999999999996, 7.8999999999999995, 4.5, 6.3999999999999995, 6, 5.3999999999999995);
    r.lineTo(6, 1.3999999999999995);
    r.bezierCurveTo(2.5, 2.7, 0, 5.9, 0, 9.7);
    r.bezierCurveTo(0, 14.7, 4.3, 18.7, 9.5, 18.7);
    r.bezierCurveTo(14.7, 18.7, 19, 14.7, 19, 9.7);
    r.bezierCurveTo(19, 5.9, 16.5, 2.7, 13, 1.4);
    r.closePath();
    r.fill();
    if (e === "onPrem") {
      r.beginPath();
      r.moveTo(10, 15);
      r.lineTo(14, 11);
      r.lineTo(18, 15);
      r.lineTo(16, 15);
      r.lineTo(16, 18);
      r.lineTo(15, 18);
      r.lineTo(15, 16);
      r.lineTo(13, 16);
      r.lineTo(13, 18);
      r.lineTo(12, 18);
      r.lineTo(12, 15);
      r.fillStyle = "#FFFF00";
      r.lineWidth = 1;
      r.strokeStyle = "#000000";
      r.stroke();
      r.fill();
    }
    if (e === "loggingIn" || e === "onOffPremCheck") {
      (function (e) {
        var r = 0.5;
        window.blinkInterval = window.setInterval(function () {
          e.clearRect(0, 0, t.width, t.height);
          e.fillStyle = "rgba(88,134,60," + r + ")";
          if ((r += 0.03) >= 1) {
            r = 0.5;
          }
          e.fill();
          chrome.browserAction.setIcon({
            imageData: e.getImageData(0, 0, 19, 19)
          });
        }, 100);
      })(r);
    }
    chrome.browserAction.setIcon({
      imageData: r.getImageData(0, 0, 19, 19)
    });
  }
};
var we = {
  isCaptivePortalMode: false,
  currentNumberOfCaptivePortalCheckFailures: 0,
  forceTabReload: false,
  isOnError: false,
  init: function () {
    ur.currentNumberOfCaptivePortalCheckFailures = 0;
    if (or.Gen4AutoLoginCaptivePortalDetection === 1) {
      setInterval(ur.checkForCaptivePortal, or.Gen4AutoLoginCaptivePortalDetectionInterval);
    }
  },
  checkForCaptivePortal: function () {
    var e = new XMLHttpRequest();
    e.open("GET", se, true);
    e.timeout = 4000;
    e.setRequestHeader("Cache-Control", "no-cache");
    e.onload = function () {
      if (e.readyState === 4) {
        if (e.responseText === "Microsoft NCSI") {
          if (ur.isCaptivePortalMode == 1 && ur.isOnError == 1 && or.ReloadTabs == 1) {
            ur.forceTabReload = true;
          }
          ur.isOnError = false;
          ur.currentNumberOfCaptivePortalCheckFailures = 0;
          ur.isCaptivePortalMode = false;
        } else {
          ur.currentNumberOfCaptivePortalCheckFailures++;
          if (ur.currentNumberOfCaptivePortalCheckFailures >= 2) {
            ur.isCaptivePortalMode = true;
          }
        }
      }
    };
    e.onerror = function () {
      ur.currentNumberOfCaptivePortalCheckFailures++;
      if (ur.currentNumberOfCaptivePortalCheckFailures >= 2) {
        ur.isCaptivePortalMode = true;
        ur.isOnError = true;
      }
    };
    e.ontimeout = function () {
      ur.currentNumberOfCaptivePortalCheckFailures++;
      if (ur.currentNumberOfCaptivePortalCheckFailures >= 2) {
        ur.isCaptivePortalMode = true;
      }
    };
    e.onabort = function () {
      ur.currentNumberOfCaptivePortalCheckFailures++;
      if (ur.currentNumberOfCaptivePortalCheckFailures >= 2) {
        ur.isCaptivePortalMode = true;
      }
    };
    e.send();
  }
};
var Re = {
  isProxyEnabled: false,
  isStartUp: true,
  init: function () {
    ur.init();
    if (or.RunTimeMode == "gen4_auto") {
      nr.init();
    }
    if (or.runtimeModeRequiresProxySettings()) {
      if (sr.isForwardProxyRunning() || ir.currentCloudRegistrationToken) {
        sr.enableProxy();
      } else {
        sr.disableProxy();
      }
      setInterval(sr.monitorProxySettingsAndNetwork, or.Gen4ProxyMonitorInterval);
    } else {
      sr.disableProxy();
    }
    if (or.IpAddressResolutionInterval > 0 && or.CompatibilityAppMode == "pac") {
      var e = or.IpAddressResolutionInterval * 1000;
      setInterval(ir.refreshIpAddress, e);
    }
  },
  isCaptivePortalDetected: function () {
    return ur.isCaptivePortalMode;
  },
  isForwardProxyRunning: function () {
    return ir.useLocalPac && ir.useLocalPac == 1 && ir.disableRegistration && ir.disableRegistration == 1;
  },
  isDefaultProxy: function () {
    return sr.isForwardProxyRunning() && ir.useDefaultLocalProxy;
  },
  monitorProxySettingsAndNetwork: function () {
    if (or.runtimeModeRequiresProxySettings()) {
      if (ur.isCaptivePortalMode || !sr.isForwardProxyRunning() && !ir.currentCloudRegistrationToken || ar.isFailingToRegister()) {
        if (sr.isProxyEnabled) {
          sr.disableProxy();
        }
      } else {
        sr.enableProxy();
        if (ur.forceTabReload == 1) {
          o();
          ur.forceTabReload = false;
        }
      }
    }
  },
  disableProxy: function () {
    if (or.runtimeModeRequiresProxySettings()) {
      chrome.proxy.settings.set({
        value: {
          mode: "direct"
        },
        scope: "regular"
      }, function () {
        sr.isProxyEnabled = false;
      });
    }
  },
  enableProxy: function () {
    if (or.runtimeModeRequiresProxySettings() && (sr.isForwardProxyRunning() || ir.currentCloudRegistrationToken)) {
      sr.isProxyEnabled = true;
      if (!sr.isForwardProxyRunning() && or.isEmptyGen4ProxyAutoConfigurationScriptURL()) {
        if (!or.Gen4ProxyHost) {
          ir.setChromeExtensionOverrideState(ce.ERROR, "Gen4ProxyHost is undefined - cannot set proxy!");
          return;
        }
        if (!or.Gen4ProxyPort) {
          ir.setChromeExtensionOverrideState(ce.ERROR, "Gen4ProxyPort is undefined - cannot set proxy!");
          return;
        }
      }
      chrome.proxy.settings.get({
        incognito: false
      }, function (e) {
        if (sr.areProxySettingsDifferentFromConfig(e)) {
          chrome.proxy.settings.clear({
            scope: "regular"
          }, function () {
            var e = sr.getProxySettingsFromConfig();
            chrome.proxy.settings.set({
              value: e,
              scope: "regular"
            }, function () {
              if (or.ReloadTabs && sr.isStartUp) {
                o();
                sr.isStartUp = false;
              }
            });
          });
        }
        if (ir.isInErrorState) {
          ir.setChromeExtensionOverrideState(ce.GEN4);
        }
      });
    }
  },
  getProxySettingsFromConfig: function () {
    if (sr.isForwardProxyRunning()) {
      if (sr.isDefaultProxy()) {
        return {
          mode: "fixed_servers",
          rules: {
            singleProxy: {
              host: "127.0.0.1",
              port: or.PACServerPort
            },
            bypassList: or.Gen4ProxyBypass
          }
        };
      } else {
        return {
          mode: "pac_script",
          pacScript: {
            url: or.LocalProxyAutoConfigurationScriptURL,
            mandatory: true
          }
        };
      }
    } else if (or.isEmptyGen4ProxyAutoConfigurationScriptURL()) {
      return {
        mode: "fixed_servers",
        rules: {
          singleProxy: {
            host: or.Gen4ProxyHost,
            port: or.Gen4ProxyPort
          },
          bypassList: or.Gen4ProxyBypass
        }
      };
    } else {
      return {
        mode: "pac_script",
        pacScript: {
          url: or.Gen4ProxyAutoConfigurationScriptURL,
          mandatory: true
        }
      };
    }
  },
  areProxySettingsDifferentFromConfig: function (e) {
    if (!or.runtimeModeRequiresProxySettings()) {
      return false;
    }
    var t = true;
    if (sr.isForwardProxyRunning()) {
      if (e.value && e.value.mode == "pac_script" && e.value.pacScript.url == or.LocalProxyAutoConfigurationScriptURL) {
        t = false;
      }
    } else if (or.isEmptyGen4ProxyAutoConfigurationScriptURL()) {
      if (e.value && e.value.mode == "fixed_servers" && e.value.rules.singleProxy && e.value.rules.singleProxy.host == or.Gen4ProxyHost && e.value.rules.singleProxy.port == or.Gen4ProxyPort) {
        var r = 0;
        if (e.value.rules.bypassList) {
          r = e.value.rules.bypassList.length;
        }
        if (or.Gen4ProxyBypass.length == r) {
          var o = 0;
          for (var i = 0; i < or.Gen4ProxyBypass.length; i++) {
            for (var n = 0; n < r; n++) {
              if (or.Gen4ProxyBypass[i] == e.value.rules.bypassList[n]) {
                o++;
                break;
              }
            }
          }
          if (o == or.Gen4ProxyBypass.length) {
            t = false;
          }
        }
      }
    } else if (e.value && e.value.mode == "pac_script" && e.value.pacScript.url == or.Gen4ProxyAutoConfigurationScriptURL) {
      t = false;
    }
    return t;
  }
};
var Oe = {
  previousRequestSuccessful: true,
  sentFailsafeRequest: false,
  init: function () {
    console.log("Monitoring: " + or.Gen4ProxyMonitorInterval);
    console.log("Path: " + or.LocalProxyAutoConfigurationScriptURL);
    setInterval(nr.headPACFile, or.Gen4ProxyMonitorInterval);
  },
  headPACFile: function () {
    var e = new XMLHttpRequest();
    if (!nr.previousRequestSuccessful) {
      if (or.PACServerFailCount > 2) {
        console.error("Compatibility app cannot be reached.  Fail count: " + or.PACServerFailCount);
      }
      or.PACServerFailCount++;
      chrome.management.launchApp(or.CompatibilityAppPluginID);
      if (nr.sentFailsafeRequest == 1) {
        console.log("Compatibility App is unresponsive.  Restarting Compatability App");
        chrome.management.setEnabled(or.CompatibilityAppPluginID, false, function () {
          chrome.management.setEnabled(or.CompatibilityAppPluginID, true);
        });
      }
    }
    nr.previousRequestSuccessful = false;
    nr.sentFailsafeRequest = false;
    if (or.PACServerFailCount > or.PACServerFailCountMax) {
      e.open("GET", "http://127.0.0.1:" + String(or.FailsafePACServerPort) + "/local.pac/checkin", true);
      nr.sentFailsafeRequest = true;
      or.PACServerFailCount = 0;
    } else {
      e.open("GET", or.LocalProxyAutoConfigurationScriptURL + "/checkin", true);
    }
    var t = nr.sentFailsafeRequest;
    e.setRequestHeader("Content-Type", "application/json; charset=utf-8");
    e.setRequestHeader("Cache-Control", "no-cache, max-age:600");
    e.timeout = 5000;
    e.onreadystatechange = function () {
      if (e.readyState === 4 && e.status === 200 && e.getResponseHeader("content-length") > 0 && (ir.useLocalPac = true, nr.previousRequestSuccessful = true, or.PACServerFailCount = 0, e.responseText)) {
        var r = {};
        try {
          if ((r = JSON.parse(e.responseText)).useDefaultLocalProxy != undefined && r.useDefaultLocalProxy == "true") {
            ir.useDefaultLocalProxy = true;
          } else {
            ir.useDefaultLocalProxy = false;
          }
          if (r.IsRestartNeeded != undefined && r.IsRestartNeeded == "true") {
            console.log("Compatibility App requested restart.  Restarting Compatability App");
            chrome.management.setEnabled(or.CompatibilityAppPluginID, false, function () {
              chrome.management.setEnabled(or.CompatibilityAppPluginID, true);
            });
          }
          if (r.runtimeMode == "proxy") {
            ir.disableRegistration = true;
            if (or.CompatibilityAppMode == "pac") {
              console.log("Extension is configured for pac, but app is running as proxy; changing compatibility mode to proxy");
              or.CompatibilityAppMode = "proxy";
            }
            if (t == 1) {
              console.log("Compatibility App may have an incorrect port configuration.  Restarting Compatability App");
              chrome.management.setEnabled(or.CompatibilityAppPluginID, false, function () {
                chrome.management.setEnabled(or.CompatibilityAppPluginID, true);
              });
            }
          } else if (r.runtimeMode == "unknown") {
            console.log("Sending failsafe parameters to Compatibility App");
            nr.sendFailsafeParams();
            or.CompatibilityAppMode = "proxy";
          } else if (or.CompatibilityAppMode == "proxy") {
            console.log("Extension is configured for proxy, but app is running as pac; changing compatibility mode to pac");
            or.CompatibilityAppMode = "pac";
          }
          if (r.isPacChanged == "true") {
            or.togglePacServerPort();
          }
        } catch (e) {}
      }
      chrome.runtime.sendMessage(or.CompatibilityAppPluginID, "Hello from iboss cloud Enterprise");
      if (or.CompatibilityAppMode == "proxy" && ir.disableRegistration == 0) {
        console.error("Extension compatibility mode is set to proxy, but compatibility app cannot be reached.");
      }
    };
    e.send(null);
  },
  sendFailsafeParams: function () {
    var e = new XMLHttpRequest();
    var t = {
      Gen4ProxyPort: or.Gen4ProxyPort,
      Gen4ProxyAutoConfigurationScriptURL: or.Gen4ProxyAutoConfigurationScriptURL,
      RunTimeMode: or.RunTimeMode,
      Gen4AutoLoginComputerOverridesUser: or.Gen4AutoLoginComputerOverridesUser,
      Gen4AutoLoginSecurityGroups: or.Gen4AutoLoginSecurityGroups,
      WebSecurityKey: or.WebSecurityKey,
      Gen4AutoLoginRegistrationInterval: or.Gen4AutoLoginRegistrationInterval,
      Gen4AutoLoginCaptivePortalDetection: or.Gen4AutoLoginCaptivePortalDetection,
      Gen4AutoLoginCaptivePortalDetectionInterval: or.Gen4AutoLoginCaptivePortalDetectionInterval,
      PolicyUpdateDetection: or.PolicyUpdateDetection,
      PolicyUpdateDetectionInterval: or.PolicyUpdateDetectionInterval,
      ChromeBridgeIP: or.ChromeBridgeIP,
      IpAddressCheckInterval: or.IpAddressCheckInterval,
      PACServerPort: or.PACServerPort,
      CompatibilityAppMode: or.CompatibilityAppMode,
      Gen4AutoLoginEncryptionRegistration: or.Gen4AutoLoginEncryptionRegistration,
      Gen4AutoRegisterPort: or.Gen4AutoRegisterPort,
      Gen4AutoRegisterSecurePort: or.Gen4AutoRegisterSecurePort,
      Gen4ProxyHost: or.Gen4ProxyHost,
      GatewayLoadBalancing: or.GatewayLoadBalancing
    };
    var r = "http://127.0.0.1:" + String(or.FailsafePACServerPort) + "/local.pac/parameterExchange=" + encodeURIComponent(JSON.stringify(t));
    e.open("GET", r, true);
    e.setRequestHeader("Content-Type", "application/json; charset=utf-8");
    e.setRequestHeader("Cache-Control", "no-cache, max-age:600");
    e.timeout = 5000;
    e.onreadystatechange = function () {
      if (e.readyState === 4) {
        if (e.status === 200) {
          if (e.getResponseHeader("content-length") <= 0) {
            console.error("Failsafe parameter exchange failure");
          }
        }
      }
    };
    e.send(null);
  }
};
var Ue = false;
var Ie = {
  httpHeaderCache: new e(20),
  ibossLastSettings: undefined,
  locationOnPrem: "NO",
  locationOnPremCounter: 0,
  webRequestCount: 0,
  init: function () {
    cr.registerLoginAndLogoutListener();
    cr.registerOnBeforeRequest();
    cr.initMsgProcessing();
    cr.monitorSWGState();
    setInterval(cr.monitorSWGState, 5000);
    setTimeout(cr.refreshOnError, 30000);
  },
  PerformUrlFilteringResponse: function () {
    this.blockUrl = undefined;
    this.doRedirectUrl = undefined;
    this.redirectUrl = undefined;
    this.doHttpHeaderManipulation = undefined;
    this.httpHeaders = undefined;
    this.acceptExceptionRequests = undefined;
    this.loginAsDifferentUser = undefined;
    this.blockReason = undefined;
    this.groupName = undefined;
    this.groupNumber = undefined;
    this.errorCode = undefined;
    this.errorMessage = undefined;
  },
  UrlExceptionRequest: function () {
    this.blockedUrl = undefined;
    this.reasonMessage = undefined;
    this.userEmail = undefined;
    this.securityKey = undefined;
    this.overrideUser = undefined;
    this.ipAddress = undefined;
  },
  UrlExceptionResponse: function () {
    this.errorCode = undefined;
    this.errorMessage = undefined;
  },
  RequestOverrideRequest: function () {
    this.username = undefined;
    this.password = undefined;
    this.userEmail = undefined;
    this.securityKey = undefined;
  },
  RequestOverrideResponse: function () {
    this.securityKey = undefined;
    this.groupName = undefined;
    this.groupNumber = undefined;
    this.errorCode = undefined;
    this.errorMessage = undefined;
  },
  RequestOverrideLogoutRequest: function () {
    this.userEmail = undefined;
    this.securityKey = undefined;
  },
  NetIDLoginResponse: function () {
    this.errorCode = undefined;
    this.errorMessage = undefined;
  },
  checkDeviceOffPremise: function (e) {
    if (navigator.onLine && !sr.isCaptivePortalDetected()) {
      var t = new XMLHttpRequest();
      t.open("GET", ne, true);
      t.timeout = 4000;
      t.setRequestHeader("Cache-Control", "no-cache");
      t.onload = function () {
        if (t.readyState === 4) {
          var r = t.responseURL;
          if (t.status === 200) {
            if (!r || r.indexOf("/swg/") == -1 && r.indexOf("accounts.iboss.com/ibossauth/index.html") == -1) {
              if (r && r.indexOf(ne) != -1) {
                e(true);
              } else {
                cr.determineOnOffPremViaNetID(e);
              }
            } else {
              e(false);
            }
          }
        }
      };
      t.onerror = function () {
        cr.determineOnOffPremViaNetID(e);
      };
      t.ontimeout = function () {
        cr.determineOnOffPremViaNetID(e);
      };
      t.onabort = function () {
        cr.determineOnOffPremViaNetID(e);
      };
      t.send();
    } else {
      e("NONET");
    }
  },
  determineOnOffPremViaNetID: function (e) {
    cr.sendIbossNetIDRequest(ir.currentUsername, function (t) {
      e(!t && undefined);
    });
  },
  sendIbossNetIDRequest: function (e, t, r) {
    if (!or || !or.SSOSecurityKey || or.SSOSecurityKey === "_" || !or.SSOHost || or.SSOHost === "_") {
      console.error(H);
      if (t) {
        t(false);
      }
      return;
    }
    if (r && (!or.SSOBackupHost || or.SSOBackupHost === "_")) {
      console.error(N);
      if (t) {
        t(false);
      }
      return;
    }
    if (!e || e.length === 0) {
      console.error("No username found for NetID Login");
      if (t) {
        t(false);
      }
      return;
    }
    if (!navigator.onLine || sr.isCaptivePortalDetected()) {
      console.log(M + D);
      if (t) {
        t(false);
      }
      return;
    }
    var o;
    o = r ? or.UseSSL ? "https://" + or.SSOBackupHost + ":" + or.SecureNetIDPort + "/chromeNetId" : "http://" + or.SSOBackupHost + ":" + or.NetIDPort + "/chromeNetId" : or.UseSSL ? "https://" + or.SSOHost + ":" + or.SecureNetIDPort + "/chromeNetId" : "http://" + or.SSOHost + ":" + or.NetIDPort + "/chromeNetId";
    o += "?action=logon";
    o += "&user=" + encodeURIComponent(e);
    o += "&key=" + encodeURIComponent(or.SSOSecurityKey);
    var i = new XMLHttpRequest();
    i.open("GET", o, true);
    i.setRequestHeader("Content-Type", "application/json; charset=utf-8");
    i.setRequestHeader("Cache-Control", "no-cache");
    i.timeout = 5000;
    i.onload = function () {
      if (i.readyState === 4) {
        var e = false;
        if (i.status === 200) {
          if (i.responseText != "SUCCESS") {
            console.error(M + i.responseText);
          } else {
            e = true;
          }
        } else {
          console.error(M + _);
        }
        if (t) {
          t(e);
        }
      }
    };
    i.onerror = function () {
      console.error(M + x);
      if (r) {
        if (t) {
          t(false);
        }
      } else {
        cr.sendIbossNetIDRequest(e, t, true);
      }
    };
    i.ontimeout = function () {
      if (r) {
        if (t) {
          t(false);
        }
      } else {
        cr.sendIbossNetIDRequest(e, t, true);
      }
    };
    i.onabort = function () {
      if (r) {
        if (t) {
          t(false);
        }
      } else {
        cr.sendIbossNetIDRequest(e, t, true);
      }
    };
    i.send();
  },
  checkUrlRequest: function (e, t, r) {
    var o = new this.PerformUrlFilteringResponse();
    if (!navigator.onLine) {
      o.blockUrl = false;
      o.errorMessage = D;
      o.errorCode = 0;
      return cr.checkUrlResponse(e, o, t, r);
    }
    if (e.startsWith(ne)) {
      o.blockUrl = false;
      return cr.checkUrlResponse(e, o, t, r);
    }
    if (!or) {
      if (!ir.isInErrorState) {
        o.blockUrl = false;
        o.errorMessage = U;
        o.errorCode = 0;
        return cr.checkUrlResponse(e, o, t, r);
      }
      o.blockUrl = false;
      o.errorMessage = j;
      o.errorCode = 0;
    }
    var i = undefined;
    var n = undefined;
    if (or.UseSSL) {
      if (or.SSOHost && or.SSOHost != "_") {
        i = "https://" + or.SSOHost + ":" + or.SecureNetIDPort;
      }
      if (or.WebSecurityHost && or.WebSecurityHost != "_") {
        n = "https://" + or.WebSecurityHost + ":" + or.HTTPSPort;
      }
    } else {
      if (or.SSOHost && or.SSOHost != "_") {
        i = "http://" + or.SSOHost + ":" + or.NetIDPort;
      }
      if (or.WebSecurityHost && or.WebSecurityHost != "_") {
        n = "http://" + or.WebSecurityHost + ":" + or.HTTPPort;
      }
    }
    if (i && e.startsWith(i) || n && e.startsWith(n)) {
      o.blockUrl = false;
      return cr.checkUrlResponse(e, o, t, r);
    }
    if (!cr.locationOnPrem) {
      o.blockUrl = false;
      o.errorMessage = G;
      o.errorCode = -1;
      return cr.checkUrlResponse(e, o, t, r);
    }
    if (cr.locationOnPrem === "YES") {
      o.blockUrl = false;
      return cr.checkUrlResponse(e, o, t, r);
    }
    if (or.AllowOffPremUsage != undefined && or.AllowOffPremUsage != 1) {
      o.blockUrl = true;
      o.errorMessage = k;
      o.errorCode = 0;
      return cr.checkUrlResponse(e, o, t, r);
    }
    if (!or.WebSecurityKey || or.WebSecurityKey === "_" || !n) {
      o.blockUrl = false;
      o.errorMessage = I;
      o.errorCode = 0;
      return cr.checkUrlResponse(e, o, t, r);
    }
    var s = n + "/json/mobileClient/performUrlFiltering";
    s += "?securityKey=" + encodeURIComponent(or.WebSecurityKey);
    if (or.OverrideUsername) {
      s += "&overrideRequest=true";
      s += "&userEmail=" + encodeURIComponent(or.OverrideUsername);
    } else {
      s += "&overrideRequest=false";
      if (ir.currentUsername) {
        s += "&userEmail=" + encodeURIComponent(ir.currentUsername);
      }
    }
    if (ir.hasValidIpAddress()) {
      s += "&ipAddress=" + encodeURIComponent(ir.currentIpAddress);
    }
    let a = encodeURIComponent(e);
    if (or.CategorizationSubmittedURLsMaxLen && or.CategorizationSubmittedURLsMaxLen > 16 && a.length > or.CategorizationSubmittedURLsMaxLen) {
      let e = or.CategorizationSubmittedURLsMaxLen;
      if (a[e - 1] === "%") {
        e -= 1;
      } else if (a[e - 2] === "%") {
        e -= 2;
      }
      a.length;
      a = a.substring(0, e);
    }
    s += "&url=" + a;
    var u = Date.now() - ir.ibossConnectStartTime;
    var c = false;
    if (cr.isBadURL && u <= 5000) {
      o.blockUrl = false;
      o.errorMessage = U;
      o.errorCode = 0;
      return cr.checkUrlResponse(e, o, t, r);
    }
    try {
      var l = new XMLHttpRequest();
      l.open("GET", s, false);
      l.setRequestHeader("Content-Type", "application/json; charset=utf-8");
      l.setRequestHeader("Cache-Control", "no-cache");
      l.send();
      cr.isBadURL = false;
      if (l.status === 200) {
        if ((o = JSON.parse(l.responseText)).blockUrl || o.errorCode && o.errorMessage) {
          if (o.blockUrl === 1) {
            o.blockUrl = true;
            o.doRedirectUrl = false;
            o.doHttpHeaderManipulation = false;
          } else if (o.blockUrl === 2) {
            o.blockUrl = true;
            o.doRedirectUrl = true;
            o.doHttpHeaderManipulation = false;
          } else if (o.blockUrl === 3) {
            o.blockUrl = false;
            o.doRedirectUrl = false;
            o.doHttpHeaderManipulation = true;
          } else {
            o.blockUrl = false;
            o.doRedirectUrl = false;
            o.doHttpHeaderManipulation = false;
          }
          if (o.acceptExceptionRequests === 1) {
            o.acceptExceptionRequests = true;
          } else {
            o.acceptExceptionRequests = false;
          }
          if (o.loginAsDifferentUser === 1) {
            o.loginAsDifferentUser = true;
          } else {
            o.loginAsDifferentUser = false;
          }
          cr.ibossLastSettings = JSON.parse(JSON.stringify(or));
          return cr.checkUrlResponse(e, o, t, r);
        }
      } else if ((l.status === 401 || l.status === 422) && !!or.OverrideUsername) {
        cr.requestOverrideLogout(false);
      }
    } catch (e) {
      cr.isBadURL = true;
      c = true;
    }
    if (c) {
      if (or.BlockOnUnsuccessfulConnection != undefined) {
        if (or.BlockOnUnsuccessfulConnection === false) {
          o.blockUrl = false;
        } else {
          o.blockUrl = true;
          o.errorCode = 0;
          o.errorMessage = x;
        }
      } else {
        o.blockUrl = false;
        o.errorMessage = $;
      }
    } else {
      o.blockUrl = false;
      o.errorMessage = _;
    }
    return cr.checkUrlResponse(e, o, t, r);
  },
  requestUrlException: function (e, t, r, o) {
    if (or && or.WebSecurityKey && or.WebSecurityKey !== "_" && or.WebSecurityHost && or.WebSecurityHost !== "_") {
      if (e && e.length !== 0) {
        if (t && t.length !== 0) {
          var i;
          var n = new cr.UrlExceptionRequest();
          n.blockedUrl = e;
          n.securityKey = or.WebSecurityKey;
          n.userEmail = t;
          if (ir.hasValidIpAddress()) {
            n.ipAddress = ir.currentIpAddress;
          }
          if (or.OverrideUsername) {
            n.overrideUser = or.OverrideUsername;
          }
          if (r && r.length > 0) {
            n.reasonMessage = r;
          }
          i = or.UseSSL ? "https://" + or.WebSecurityHost + ":" + or.HTTPSPort + "/json/mobileClient/urlExceptionRequest" : "http://" + or.WebSecurityHost + ":" + or.HTTPPort + "/json/mobileClient/urlExceptionRequest";
          var s = new XMLHttpRequest();
          s.open("POST", i, true);
          s.setRequestHeader("Content-Type", "application/json; charset=utf-8");
          s.setRequestHeader("Cache-Control", "no-cache");
          s.timeout = 5000;
          s.onload = function () {
            if (s.readyState === 4 && (s.status === 200 || s.status === 422)) {
              if (s.responseText === "SUCCESS") {
                o(true);
              } else {
                var e = JSON.parse(s.responseText);
                if (cr.hasErrorResponse(e)) {
                  o(cr.extractErrorMessage(e));
                }
              }
            }
          };
          s.onerror = function () {
            o(x);
          };
          s.ontimeout = function () {
            o(x);
          };
          s.onabort = function () {
            o("Connection Aborted");
          };
          s.send(JSON.stringify(n));
        } else {
          o(F);
        }
      } else {
        o("Invalid URL Exception request");
      }
    } else {
      o("Unable to request a URL Exception at this time");
    }
  },
  isValidOverrideLoginSettings: function (e) {
    return !!e && !!e.WebSecurityKey && e.WebSecurityKey !== "_" && !!e.WebSecurityHost && e.WebSecurityHost !== "_";
  },
  requestOverrideLogin: function (e, t, r, o) {
    if (!cr.isValidOverrideLoginSettings(or)) {
      if (!cr.isValidOverrideLoginSettings(cr.ibossLastSettings)) {
        ir.setChromeExtensionOverrideState(ce.ERROR, "Unable to request an override at this time");
        o({
          retVal: undefined
        });
        return;
      }
      or = cr.ibossLastSettings;
    }
    if (or.OriginalWebSecurityKey) {
      ir.setChromeExtensionOverrideState(ce.ERROR, "An override session is already active");
      o({
        retVal: undefined
      });
      return;
    }
    if (!e || e.length === 0) {
      ir.setChromeExtensionOverrideState(ce.LOGGED_OUT);
      o({
        retVal: "Please enter an override username"
      });
      return;
    }
    if (!t || t.length === 0) {
      ir.setChromeExtensionOverrideState(ce.LOGGED_OUT);
      o({
        retVal: "Please enter an override password"
      });
      return;
    }
    var i = parseInt(r);
    if (!i || i < 5) {
      i = 5;
    }
    var n;
    var s = new cr.RequestOverrideRequest();
    s.username = e;
    s.password = t;
    s.userEmail = ir.currentUsername;
    s.securityKey = or.WebSecurityKey;
    n = or.UseSSL ? "https://" + or.WebSecurityHost + ":" + or.HTTPSPort + "/json/mobileClient/requestOverride" : "http://" + or.WebSecurityHost + ":" + or.HTTPPort + "/json/mobileClient/requestOverride";
    var a = new XMLHttpRequest();
    a.open("POST", n, true);
    a.setRequestHeader("Content-Type", "application/json; charset=utf-8");
    a.setRequestHeader("Cache-Control", "no-cache");
    a.timeout = 5000;
    a.onload = function () {
      if (a.readyState === 4) {
        if (a.status === 200 || a.status === 422 || a.status === 401) {
          var t = JSON.parse(a.responseText);
          if (cr.hasErrorResponse(t)) {
            ir.setChromeExtensionOverrideState(ce.LOGGED_OUT);
            o({
              retVal: cr.extractErrorMessage(t)
            });
          } else if (t.securityKey && t.securityKey !== "" && t.groupName && t.groupName !== "" && t.groupNumber && t.groupNumber !== 0) {
            or.OverrideUsername = e;
            or.OverrideGroupName = t.groupName;
            or.OverrideGroupNumber = t.groupNumber;
            or.OriginalWebSecurityKey = or.WebSecurityKey;
            or.WebSecurityKey = t.securityKey;
            chrome.alarms.create("overrideTimeoutAlarm", {
              delayInMinutes: i
            });
            ir.setChromeExtensionOverrideState(ce.LOGGED_IN, undefined, t.groupNumber, t.groupName, e);
            o({
              retVal: undefined
            });
          } else {
            ir.setChromeExtensionOverrideState(ce.LOGGED_OUT);
            o({
              retVal: _
            });
          }
        } else {
          ir.setChromeExtensionOverrideState(ce.LOGGED_OUT);
          o({
            retVal: _
          });
        }
      }
    };
    a.onerror = function () {
      ir.setChromeExtensionOverrideState(ce.LOGGED_OUT);
      o({
        retVal: x
      });
    };
    a.ontimeout = function () {
      ir.setChromeExtensionOverrideState(ce.LOGGED_OUT);
      o({
        retVal: x
      });
    };
    a.onabort = function () {
      o({
        retVal: "Connection Aborted"
      });
    };
    a.send(JSON.stringify(s));
  },
  requestOverrideLogout: function (e) {
    if (or && or.WebSecurityHost && or.WebSecurityHost != "_") {
      if (e) {
        var t;
        var r = new cr.RequestOverrideLogoutRequest();
        r.securityKey = or.WebSecurityKey;
        if (or.OverrideUsername) {
          r.userEmail = or.OverrideUsername;
        } else {
          r.userEmail = ir.currentUsername;
        }
        t = or.UseSSL ? "https://" + or.WebSecurityHost + ":" + or.HTTPSPort + "/json/mobileClient/requestOverrideLogout" : "http://" + or.WebSecurityHost + ":" + or.HTTPPort + "/json/mobileClient/requestOverrideLogout";
        var o = new XMLHttpRequest();
        o.open("POST", t, true);
        o.setRequestHeader("Content-Type", "application/json; charset=utf-8");
        o.setRequestHeader("Cache-Control", "no-cache");
        o.timeout = 5000;
        o.onload = function () {
          if (o.readyState === 4 && o.status != 200) {
            console.error(T + "HTTP Status Code: " + o.status);
          }
        };
        o.onerror = function () {
          console.error(T + x);
        };
        o.ontimeout = function () {
          console.error(T + x);
        };
        o.onabort = function () {
          console.error("Connection Aborted");
        };
        o.send(JSON.stringify(r));
      }
      if (or.OriginalWebSecurityKey) {
        or.WebSecurityKey = or.OriginalWebSecurityKey;
        or.OriginalWebSecurityKey = undefined;
        if (cr.locationOnPrem == "NO") {
          ir.setChromeExtensionOverrideState(ce.LOGGED_OUT);
        }
      }
      or.OverrideUsername = undefined;
      or.OverrideGroupName = undefined;
      or.OverrideGroupNumber = undefined;
      or.OverrideExpirationTime = undefined;
      chrome.alarms.clear("overrideTimeoutAlarm");
    }
  },
  hasErrorResponse: function (e) {
    return e.errorCode && e.errorMessage;
  },
  extractErrorMessage: function (e) {
    var t = "";
    if (e.errorCode) {
      t += e.errorCode + " - ";
    }
    return t += e.errorMessage;
  },
  checkUrlResponse: function (e, t, r, o) {
    if (t.doRedirectUrl && t.doRedirectUrl === true && t.redirectUrl) {
      return {
        redirectUrl: t.redirectUrl
      };
    }
    if (t.doHttpHeaderManipulation && t.doHttpHeaderManipulation === true && t.httpHeaders) {
      cr.httpHeaderCache.put(r.requestId, t.httpHeaders);
      return {
        cancel: false
      };
    }
    if (!t.blockUrl) {
      return {
        cancel: false
      };
    }
    if (r.type != "main_frame") {
      return {
        cancel: true
      };
    }
    var i = chrome.extension.getURL("/restricted.html");
    if (o) {
      i = o;
    }
    i += "?bu=" + encodeURIComponent(e);
    if (t.groupNumber) {
      i += "&fn=" + encodeURIComponent(t.groupNumber);
    }
    if (t.groupName) {
      i += "&fp=" + encodeURIComponent(t.groupName);
    }
    if (ir.hasValidIpAddress()) {
      i += "&ip=" + encodeURIComponent(ir.currentIpAddress);
    }
    if (or.WebSecurityHost && or.WebSecurityHost != "_") {
      i += "&ibip=" + encodeURIComponent(or.WebSecurityHost);
    }
    if (t.loginAsDifferentUser && t.loginAsDifferentUser) {
      i += "&ldu=1";
    } else {
      i += "&ldu=0";
    }
    if (t.acceptExceptionRequests && t.acceptExceptionRequests) {
      i += "&re=1";
    } else {
      i += "&re=0";
    }
    if (ir.currentUsername) {
      i += "&ce=" + encodeURIComponent(ir.currentUsername);
    }
    if (t.blockReason) {
      i += "&bc=" + encodeURIComponent(t.blockReason);
    } else if (cr.hasErrorResponse(t)) {
      i += "&bc=" + encodeURIComponent(cr.extractErrorMessage(t));
    }
    return {
      redirectUrl: i
    };
  },
  refreshOnError: function () {
    if (ir.isInErrorState) {
      chrome.runtime.reload();
    }
    setTimeout(function () {
      cr.refreshOnError();
    }, 60000);
  },
  monitorSWGState: function () {
    var e = undefined;
    if (or) {
      if (cr.locationOnPrem && cr.locationOnPrem != "YES") {
        if (or.UseSSL) {
          if (or.WebSecurityHost && or.WebSecurityHost != "_") {
            e = "https://" + or.WebSecurityHost + ":" + or.HTTPSPort;
          }
        } else if (or.WebSecurityHost && or.WebSecurityHost != "_") {
          e = "http://" + or.WebSecurityHost + ":" + or.HTTPPort;
        }
        if (e) {
          var t = new XMLHttpRequest();
          t.open("HEAD", e, true);
          t.setRequestHeader("Cache-Control", "no-cache");
          t.timeout = 5000;
          t.onload = function () {
            Ue = false;
          };
          t.onerror = function () {
            Ue = true;
          };
          t.ontimeout = function () {
            Ue = true;
          };
          t.onabort = function () {
            Ue = true;
          };
          t.send();
        }
      } else {
        cr.isBadURL = true;
      }
    }
  },
  processMessage: function (e, t, r) {
    if (e.type == "CURRENT_USER_EMAIL") {
      r({
        retVal: ir.currentUsername
      });
    } else if (e.type == "CURRENT_USER_IP_ADDRESS") {
      r({
        retVal: ir.currentIpAddress
      });
    } else {
      if (e.type == "EXCEPTION_REQUEST") {
        cr.requestUrlException(e.url, e.email, e.reason, r);
        return true;
      }
      if (e.type == "OVERRIDE_LOGIN") {
        ir.setChromeExtensionOverrideState(ce.LOGGING_IN);
        cr.requestOverrideLogin(e.username, e.password, e.timeoutMinutes, r);
        return true;
      }
      if (e.type == "OVERRIDE_LOGOUT") {
        cr.requestOverrideLogout(true);
      } else {
        console.error("Received unknown type of inter-extension message");
      }
    }
  },
  initMsgProcessing: function () {
    chrome.runtime.onMessage.removeListener(cr.processMessage);
    chrome.runtime.onMessage.addListener(cr.processMessage);
    cr.initAlarmProcessing();
  },
  processAlarms: function (e) {
    if (e.name == "overrideTimeoutAlarm") {
      cr.requestOverrideLogout(true);
    } else if (e.name == "checkLocationAlarm") {
      cr.checkDeviceOffPremise(function (e) {
        var t = e;
        if (e === undefined || e === "NONET") {
          if (cr.locationOnPrem != undefined) {
            if (cr.locationOnPremCounter < 4) {
              if (cr.locationOnPrem === "NO") {
                e = true;
              } else if (cr.locationOnPrem === "YES") {
                e = false;
              }
              if (t != "NONET") {
                cr.locationOnPremCounter++;
              }
            } else {
              cr.locationOnPremCounter = 0;
            }
          } else {
            e = true;
          }
        }
        if (or.AlwaysMobile == "1") {
          cr.locationOnPrem = "NO";
        } else if (e === undefined || sr.isCaptivePortalDetected()) {
          cr.locationOnPrem = "NO";
          chrome.alarms.clear("netIDLoginAlarm");
          chrome.alarms.clear("checkLocationAlarm");
          chrome.alarms.create("checkLocationAlarm", {
            when: Date.now() + 5000,
            periodInMinutes: 10
          });
          ir.setChromeExtensionOverrideState(ce.ON_OFF_PREM_CHECK);
        } else if (e) {
          cr.locationOnPrem = "NO";
          chrome.alarms.clear("netIDLoginAlarm");
          if (or.OriginalWebSecurityKey) {
            ir.setChromeExtensionOverrideState(ce.LOGGED_IN);
          } else {
            ir.setChromeExtensionOverrideState(ce.LOGGED_OUT);
          }
        } else if (or) {
          cr.locationOnPrem = "YES";
          chrome.alarms.get("netIDLoginAlarm", function (e) {
            var t = 10;
            if (or && or.SSOLoginIntervalMinutes) {
              t = or.SSOLoginIntervalMinutes;
            }
            if ((!e || e.periodInMinutes != t) && !!or.SSOHost && or.SSOHost != "_") {
              chrome.alarms.clear("netIDLoginAlarm");
              chrome.alarms.create("netIDLoginAlarm", {
                when: Date.now(),
                periodInMinutes: t
              });
            }
          });
          ir.setChromeExtensionOverrideState(ce.ON_PREM);
          if (or.OriginalWebSecurityKey) {
            cr.requestOverrideLogout(true);
          }
        } else {
          ir.setChromeExtensionOverrideState(ce.HIDDEN);
        }
      });
    } else if (e.name == "netIDLoginAlarm") {
      cr.sendIbossNetIDRequest(ir.currentUsername);
    }
  },
  restartLocationNetIDAlarms: function (e) {
    chrome.alarms.clear("checkLocationAlarm");
    chrome.alarms.clear("netIDLoginAlarm");
    if (e == undefined || e) {
      if (or && or.SSOHost && or.SSOHost != "_" && or.SSOSecurityKey && or.SSOSecurityKey != "_") {
        ir.setChromeExtensionIcon(ce.ON_OFF_PREM_CHECK);
        chrome.alarms.create("checkLocationAlarm", {
          when: Date.now(),
          periodInMinutes: 10
        });
      } else {
        cr.locationOnPrem = "NO";
      }
    }
  },
  processNetworkStateChange: function () {
    if (navigator.onLine) {
      cr.restartLocationNetIDAlarms(true);
    }
  },
  initAlarmProcessing: function () {
    chrome.alarms.onAlarm.removeListener(cr.processAlarms);
    chrome.alarms.onAlarm.addListener(cr.processAlarms);
    cr.restartLocationNetIDAlarms(true);
    window.removeEventListener("online", cr.processNetworkStateChange, false);
    window.removeEventListener("offline", cr.processNetworkStateChange, false);
    window.addEventListener("online", cr.processNetworkStateChange, false);
    window.addEventListener("offline", cr.processNetworkStateChange, false);
    cr.initIdleStateProcessing();
  },
  processIdleStateUpdate: function (e) {
    if (e == "active") {
      cr.restartLocationNetIDAlarms(true);
    } else if (e == "idle" || e == "locked") {
      cr.restartLocationNetIDAlarms(false);
    }
  },
  initIdleStateProcessing: function () {
    chrome.idle.setDetectionInterval(120);
    chrome.idle.onStateChanged.removeListener(cr.processIdleStateUpdate);
    chrome.idle.onStateChanged.addListener(cr.processIdleStateUpdate);
    cr.afterRedirectorInit();
  },
  isValidAfterRedirectSettings: function (e) {
    return !!e && (!!e.SSOHost && e.SSOHost != "_" || !!e.WebSecurityHost && e.WebSecurityHost != "_") && (!!e.SSOSecurityKey && e.SSOSecurityKey != "_" || !!e.WebSecurityKey && e.WebSecurityKey != "_");
  },
  afterRedirectorInit: function () {
    if (!cr.isValidAfterRedirectSettings(or)) {
      if (!cr.isValidAfterRedirectSettings(cr.ibossLastSettings)) {
        ir.setChromeExtensionOverrideState(ce.ERROR, "Setup information not received", undefined, undefined, undefined, true);
        return;
      }
      or = cr.ibossLastSettings;
    }
    if (ir.currentUsername) {
      ir.setChromeExtensionOverrideState(ce.ON_OFF_PREM_CHECK);
    } else {
      ir.setChromeExtensionOverrideState(ce.ERROR, L, undefined, undefined, undefined, true);
    }
  },
  registerLoginAndLogoutListener: function () {
    chrome.identity.onSignInChanged.addListener(function (e, t) {
      if (t) {
        ir.refreshUsername();
      }
    });
  },
  registerOnBeforeRequest: function () {
    chrome.webRequest.onBeforeRequest.addListener(function (e) {
      var t = e.url;
      if (or.FilterPerformance && (or.FilterPerformance == "MEDIUM" || or.FilterPerformance == "HIGH")) {
        if (e.type == "script" || e.type == "xmlhttprequest") {
          return {
            cancel: false
          };
        }
        if (or.FilterPerformance == "HIGH") {
          if (e.type == "object" || e.type == "other") {
            return {
              cancel: false
            };
          }
          if (e.type == "image" && t.indexOf("images?q=tbn") == -1) {
            return {
              cancel: false
            };
          }
        }
      }
      if (cr.locationOnPrem && cr.locationOnPrem === "YES" || sr.isCaptivePortalDetected() || t.indexOf(ne) == 0 || t.indexOf(ie) == 0 || or.AllowOffPremUsage != undefined && or.AllowOffPremUsage === true && or.FilterWhenOffPrem === false || t.indexOf(chrome.extension.getURL("")) == 0 || t.indexOf("https://www.googleapis.com/") == 0 || t.indexOf("http://www.gstatic.com/") == 0 || t.indexOf("googleusercontent.com/crx/blobs") != -1) {
        return {
          cancel: false
        };
      }
      var r = undefined;
      var o = undefined;
      var i = undefined;
      var n = undefined;
      if (or.UseSSL) {
        if (or.SSOHost && or.SSOHost != "_") {
          r = "https://" + or.SSOHost + ":" + or.SecureNetIDPort;
        }
        if (or.SSOBackupHost && or.SSOBackupHost != "_") {
          o = "https://" + or.SSOBackupHost + ":" + or.SecureNetIDPort;
        }
        if (or.WebSecurityHost && or.WebSecurityHost != "_") {
          i = "https://" + or.WebSecurityHost + ":" + or.HTTPSPort;
        }
      } else {
        if (or.SSOHost && or.SSOHost != "_") {
          r = "http://" + or.SSOHost + ":" + or.NetIDPort;
        }
        if (or.SSOBackupHost && or.SSOBackupHost != "_") {
          o = "http://" + or.SSOBackupHost + ":" + or.NetIDPort;
        }
        if (or.WebSecurityHost && or.WebSecurityHost != "_") {
          i = "http://" + or.WebSecurityHost + ":" + or.HTTPPort;
        }
      }
      if (or.WebSecurityCustomBlockPageURL && or.WebSecurityCustomBlockPageURL != "_" && or.WebSecurityCustomBlockPageURL != "") {
        n = or.WebSecurityCustomBlockPageURL;
      }
      if (r && t.startsWith(r) || o && t.startsWith(o) || i && t.startsWith(i) || n && t.startsWith(n)) {
        return {
          cancel: false
        };
      }
      if (!cr.locationOnPrem) {
        var s = chrome.extension.getURL("/loader.html");
        return {
          redirectUrl: s += "?rl=" + t
        };
      }
      return cr.checkUrlRequest(t, e, n);
    }, {
      urls: ["<all_urls>"],
      types: ["main_frame", "sub_frame", "script", "image", "object", "xmlhttprequest", "other"]
    }, ["blocking"]);
  },
  registerOnBeforeSendHeaders: function () {
    chrome.webRequest.onBeforeSendHeaders.addListener(function (e) {}, {
      urls: ["<all_urls>"],
      types: ["main_frame", "sub_frame", "script", "image", "object", "xmlhttprequest", "other"]
    }, ["blocking", "requestHeaders"]);
  }
};
var Le = {
  init: function () {
    lr.registerOnAuthRequired();
    lr.registerLoginAndLogoutListener();
  },
  registerLoginAndLogoutListener: function () {
    chrome.identity.onSignInChanged.addListener(function (e, t) {
      if (t) {
        ar.reRegisterWithCloud();
      }
    });
  },
  registerOnAuthRequired: function () {
    chrome.webRequest.onAuthRequired.addListener(lr.onAuthRequired, {
      urls: ["<all_urls>"]
    }, ["blocking"]);
  },
  onAuthRequired: function (e) {
    if (e.isProxy && e.realm) {
      if (e.realm.indexOf("iboss") == -1) {
        return {};
      } else if (sr.isForwardProxyRunning()) {
        return {
          cancel: true
        };
      } else if (ir.currentCloudRegistrationToken) {
        return {
          authCredentials: {
            username: ir.currentCloudRegistrationToken,
            password: "ibssoid"
          }
        };
      } else {
        return {
          cancel: true
        };
      }
    } else {
      return {};
    }
  }
};
var xe = {
  running: false,
  init: function () {
    console.log("Starting iboss cloud connector...");
    or.init();
  },
  run: function () {
    console.log("Finalizing iboss cloud connector startup at " + new Date());
    rr.running = true;
    ar.init();
    if (or.RunTimeMode === "gen4_auto") {
      lr.init();
    } else {
      cr.init();
    }
    sr.init();
  }
};
var Ee = {
  hasRegisteredToCloud: false,
  failedCloudConnectAttempts: 0,
  init: function () {
    if (or.runtimeModeRequiresCloudRegistration()) {
      ar.registerWithCloud();
      var e = or.Gen4AutoLoginRegistrationInterval * 1000;
      if (e > 0) {
        setInterval(ar.registerOnInterval, e);
      }
    }
  },
  isFailingToRegister: function () {
    return rr.failedCloudConnectAttempts >= 2;
  },
  registerOnInterval: function () {
    if (!ir.disableRegistration) {
      if (ar.hasRegisteredToCloud) {
        ar.registerWithCloud();
      }
    }
  },
  getRegistrationParameters: function (e, r, o) {
    var i = e + ";" + or.WebSecurityKey + ";" + e;
    if (or.Gen4AutoLoginSecurityGroups) {
      i += ";" + or.Gen4AutoLoginSecurityGroups;
    } else {
      i += ";";
    }
    return i += ";" + or.Gen4AutoLoginComputerOverridesUser + ";" + o + ";;;;Unavailable;" + r + ";" + t() + ";" + u + ";;;;;chromebook;1;" + or.MitmCertChecksum + ";" + or.StagedMitmCertChecksum + ";;";
  },
  getRequestUrl: function (e, t, r) {
    var o = ar.getRegistrationParameters(e, t, r);
    var i = "https://" + or.Gen4ProxyHost + ":" + or.Gen4AutoRegisterSecurePort + m;
    if (or.RunTimeMode == "gen4_auto" && or.Gen4AutoRegisterSecurePort == 0) {
      i = "http://" + or.Gen4ProxyHost + ":" + or.Gen4AutoRegisterPort + m;
    }
    if (or.Gen4AutoLoginEncryptionRegistration) {
      var n = new Te(p, "cbc").encrypt(o, p.length, f);
      i = i + "v2c=" + encodeURIComponent(n.toString("base64"));
    } else {
      i += encodeURIComponent(o);
    }
    return i;
  },
  reRegisterWithCloud: function () {
    if (!ir.disableRegistration) {
      ar.hasRegisteredToCloud = false;
      ar.failedCloudConnectAttempts = 0;
      ar.registerWithCloud();
    }
  },
  registerWithCloud: function () {
    if (!ir.disableRegistration) {
      if (or.runtimeModeRequiresCloudRegistration()) {
        ir.refreshUsername();
      }
    }
  },
  registerWithCloudGetUsernameCallback: function () {
    ir.refreshDeviceUUID();
  },
  registerWithCloudGetIpAddressCallback: function () {
    ir.refreshDeviceUUID();
  },
  registerWithCloudGetDeviceIdCallback: function () {
    ar.registerWithCloudPerformRequest();
  },
  updateSettingsFromCloudRegResponse: function (e) {
    console.log("Updating settings from cloud registration response...");
    if (!e || e == undefined) {
      console.log("Registration response does not include settings data.");
      return false;
    }
    var t = false;
    var r = atob(e);
    var o = JSON.parse(r);
    console.log("Decoded agent settings from cloud reg response: " + r);
    var i = {
      CloudGen4AutoLoginComputerOverridesUser: or.Gen4AutoLoginComputerOverridesUser,
      CloudGen4ProxyAutoConfigurationScriptURL: or.Gen4ProxyAutoConfigurationScriptURL,
      CloudGen4AutoLoginSecurityGroups: or.Gen4AutoLoginSecurityGroups,
      CloudGen4AutoLoginRegistrationInterval: or.Gen4AutoLoginRegistrationInterval,
      CloudGen4AutoLoginCaptivePortalDetection: or.Gen4AutoLoginCaptivePortalDetection,
      CloudGen4AutoLoginCaptivePortalDetectionInterval: or.Gen4AutoLoginCaptivePortalDetectionInterval,
      CloudPolicyUpdateDetection: or.PolicyUpdateDetection,
      CloudPolicyUpdateDetectionInterval: or.PolicyUpdateDetectionInterval
    };
    if (o.UseMachineNameForUsername != undefined && o.UseMachineNameForUsername != -1 && or.Gen4AutoLoginComputerOverridesUser != o.UseMachineNameForUsername) {
      console.log("Updating UseMachineNameForUsername from cloud registration response.");
      i.CloudGen4AutoLoginComputerOverridesUser = o.UseMachineNameForUsername;
      t = true;
      true;
    }
    if (o.ProxyAutoConfigScript != undefined && o.ProxyAutoConfigScript != "__NO_CHANGE__" && or.Gen4ProxyAutoConfigurationScriptURL != o.ProxyAutoConfigScript) {
      console.log("Updating AutoProxyURL from cloud registration response.");
      i.CloudGen4ProxyAutoConfigurationScriptURL = o.ProxyAutoConfigScript;
      t = true;
    }
    if (o.SecurityGroupNames != undefined && o.SecurityGroupNames != "__NO_CHANGE__" && or.Gen4AutoLoginSecurityGroups != o.SecurityGroupNames) {
      console.log("Updating SecurityGroupNames from cloud registration response.");
      i.CloudGen4AutoLoginSecurityGroups = o.SecurityGroupNames;
      t = true;
      true;
    }
    if (o.RegistrationInterval != undefined && o.RegistrationInterval != -1 && or.Gen4AutoLoginRegistrationInterval != o.RegistrationInterval) {
      console.log("Updating RegistrationInterval from cloud registration response.");
      i.CloudGen4AutoLoginRegistrationInterval = o.RegistrationInterval;
      t = true;
    }
    if (o.CaptivePortalDetection != undefined && o.CaptivePortalDetection != -1 && or.Gen4AutoLoginCaptivePortalDetection != o.CaptivePortalDetection) {
      console.log("Updating CaptivePortalDetection from cloud registration response.");
      i.CloudGen4AutoLoginCaptivePortalDetection = o.CaptivePortalDetection;
      t = true;
    }
    if (o.CaptivePortalDetection != undefined && o.CaptivePortalDetection > 0 && or.Gen4AutoLoginCaptivePortalDetectionInterval != o.CaptivePortalMonitorInterval) {
      console.log("Updating CaptivePortalDetectionInterval from cloud registration response.");
      if (o.CaptivePortalMonitorInterval < 1000) {
        o.CaptivePortalMonitorInterval = 1000;
      }
      i.CloudGen4AutoLoginCaptivePortalDetectionInterval = o.CaptivePortalMonitorInterval;
      t = true;
    }
    if (o.PolicyUpdateDetection != undefined && o.PolicyUpdateDetection != -1 && or.PolicyUpdateDetection != o.PolicyUpdateDetection) {
      console.log("Updating PolicyUpdateDetection from cloud registration response.");
      i.CloudPolicyUpdateDetection = o.PolicyUpdateDetection;
      t = true;
    }
    if (o.PolicyUpdateDetection != undefined && o.PolicyUpdateDetection > 0 && or.PolicyUpdateDetectionInterval != o.PolicyUpdateDetectionInterval) {
      console.log("Updating PolicyUpdateDetectionInterval from cloud registration response.");
      if (o.PolicyUpdateDetectionInterval < 10000) {
        o.PolicyUpdateDetectionInterval = 10000;
      }
      i.CloudPolicyUpdateDetectionInterval = o.PolicyUpdateDetectionInterval;
      t = true;
    }
    if (t) {
      or.storeCloudSettings(i);
    }
    return t;
  },
  registerWithCloudPerformRequest: function () {
    if (!ir.disableRegistration && or.runtimeModeRequiresCloudRegistration()) {
      var e = ir.currentUsername;
      var t = ir.currentDeviceUUID;
      var r = ir.currentIpAddress;
      r ||= "0.0.0.0";
      var o = ar.getRequestUrl(e, t, r);
      var i = new XMLHttpRequest();
      i.onreadystatechange = function () {
        if (this.readyState === 4) {
          var t = {};
          try {
            t = JSON.parse(i.responseText);
          } catch (e) {
            t.success = 0;
          }
          if (this.status === 200 && t.success && t.sessionKey) {
            if (t.agentSettings) {
              ar.updateSettingsFromCloudRegResponse(t.agentSettings);
            }
            ir.setCurrentUserCloudRegistrationToken(e, t.sessionKey);
            ar.failedCloudConnectAttempts = 0;
            ar.hasRegisteredToCloud = true;
          } else if (!ar.isFailingToRegister()) {
            ar.failedCloudConnectAttempts++;
            setTimeout(ar.registerWithCloud, 1000);
          }
        }
      };
      i.open("GET", o, true);
      i.send();
    }
  }
};
var De = e => Array.isArray(e) ? e.slice() : [...nt.from(e)];
const ke = [16, 24, 32];
const Ge = {
  16: {
    16: 10,
    24: 12,
    32: 14
  },
  24: {
    16: 12,
    24: 12,
    32: 14
  },
  32: {
    16: 14,
    24: 14,
    32: 14
  }
};
class _e {
  constructor(e) {
    let t = e.length;
    if (!ke.includes(t)) {
      throw "Unsupported key size: " + t * 8 + "bit";
    }
    this.key = De(e);
    this.keySize = t;
  }
  ExpandKey(e) {
    let t = this.key.length;
    let r = Ge[e][t];
    let o = new Array((r + 1) * e);
    for (let e = 0; e < t; e++) {
      o[e] = this.key[e];
    }
    let i = 0;
    for (let e = t; e < o.length; e += 4) {
      let r = o.slice(e - 4, e);
      if (e % t == 0) {
        r = [He[r[1]] ^ Ne[i], He[r[2]], He[r[3]], He[r[0]]];
        i++;
      }
      if (e % t < 16) {
        for (let i = 0; i < 4; i++) {
          o[e + i] = o[e - t + i] ^ r[i];
        }
      }
      if (t !== 16) {
        if (t === 32 && e % t == 16) {
          r = [He[r[0]], He[r[1]], He[r[2]], He[r[3]]];
          for (let i = 0; i < 4; i++) {
            o[e + i] = o[e - t + i] ^ r[i];
          }
        } else {
          for (let i = 0; i < 4; i++) {
            o[e + i] = o[e - t + i] ^ r[i];
          }
        }
      }
    }
    return o;
  }
  AddRoundKey(e, t, r) {
    let o = e.length;
    for (let i = 0; i < o; i++) {
      e[i] ^= t[r * o + i];
    }
  }
  SubBytes(e) {
    for (let t = 0; t < e.length; t++) {
      e[t] = He[e[t]];
    }
  }
  SubBytesReversed(e) {
    for (let t = 0; t < e.length; t++) {
      e[t] = He.indexOf(e[t]);
    }
  }
  ShiftRows(e) {
    let t = [];
    for (let r = 0; r < e.length; r++) {
      t[r] = e[We[e.length][r]];
    }
    for (let r = 0; r < e.length; r++) {
      e[r] = t[r];
    }
  }
  ShiftRowsReversed(e) {
    let t = [];
    for (let r = 0; r < e.length; r++) {
      t[r] = e[We[e.length].indexOf(r)];
    }
    for (let r = 0; r < e.length; r++) {
      e[r] = t[r];
    }
  }
  MixColumns(e) {
    for (let t = 0; t < e.length; t += 4) {
      let r = e.slice(t, t + 4);
      let o = [Be[r[0]] ^ Fe[r[1]] ^ r[2] ^ r[3], r[0] ^ Be[r[1]] ^ Fe[r[2]] ^ r[3], r[0] ^ r[1] ^ Be[r[2]] ^ Fe[r[3]], Fe[r[0]] ^ r[1] ^ r[2] ^ Be[r[3]]];
      e[t + 0] = o[0];
      e[t + 1] = o[1];
      e[t + 2] = o[2];
      e[t + 3] = o[3];
    }
  }
  MixColumnsReversed(e) {
    for (let t = 0; t < e.length; t += 4) {
      let r = e.slice(t, t + 4);
      let o = [Xe[r[0]] ^ Ke[r[1]] ^ Ve[r[2]] ^ qe[r[3]], qe[r[0]] ^ Xe[r[1]] ^ Ke[r[2]] ^ Ve[r[3]], Ve[r[0]] ^ qe[r[1]] ^ Xe[r[2]] ^ Ke[r[3]], Ke[r[0]] ^ Ve[r[1]] ^ qe[r[2]] ^ Xe[r[3]]];
      e[t + 0] = o[0];
      e[t + 1] = o[1];
      e[t + 2] = o[2];
      e[t + 3] = o[3];
    }
  }
  encrypt(e) {
    let t = De(e);
    let r = t.length;
    let o = this.keySize;
    let i = Ge[r][o];
    if (!ke.includes(r)) {
      throw "Unsupported block size: " + r * 8 + "bit";
    }
    let n = t.slice();
    let s = this.ExpandKey(r);
    this.AddRoundKey(n, s, 0);
    for (let e = 1; e < i; e++) {
      this.SubBytes(n);
      this.ShiftRows(n);
      this.MixColumns(n);
      this.AddRoundKey(n, s, e);
    }
    this.SubBytes(n);
    this.ShiftRows(n);
    this.AddRoundKey(n, s, i);
    return n;
  }
  decrypt(e) {
    let t = De(e);
    let r = t.length;
    let o = this.keySize;
    let i = Ge[r][o];
    if (!ke.includes(r)) {
      throw "Unsupported block size: " + r * 8 + "bit";
    }
    let n = t.slice();
    let s = this.ExpandKey(r);
    this.AddRoundKey(n, s, i);
    this.ShiftRowsReversed(n);
    this.SubBytesReversed(n);
    for (let e = i - 1; e >= 1; e--) {
      this.AddRoundKey(n, s, e);
      this.MixColumnsReversed(n);
      this.ShiftRowsReversed(n);
      this.SubBytesReversed(n);
    }
    this.AddRoundKey(n, s, 0);
    return n;
  }
}
const Me = ["ecb", "cbc"];
class Te {
  constructor(e, t) {
    let r = e.length;
    if (!ke.includes(r)) {
      throw `Unsupported key size: ${r * 8} bit`;
    }
    if (!Me.includes(t)) {
      throw `Unsupported mode: ${t}`;
    }
    this.key = De(e);
    this.keySize = r;
    this.mode = t;
  }
  encrypt(e, t, r) {
    if ((t = parseInt(t)) <= 32 && !ke.includes(t)) {
      throw `Unsupported block size: ${t * 8} bit`;
    }
    if (t > 32 && (t /= 8, !ke.includes(t))) {
      throw `Unsupported block size: ${t} bit`;
    }
    if (this.mode === "cbc") {
      if (!r) {
        throw `IV is required for mode ${this.mode}`;
      }
      if (r.length !== t) {
        throw `IV size should match with block size (${t * 8} bit)`;
      }
    }
    let o = De(e);
    let i = o.length % t;
    for (i !== 0 && (i = t - i); i-- > 0;) {
      o.push(0);
    }
    let n = o.length / t;
    let s = new Array(o.length);
    let a = new _e(this.key);
    switch (this.mode) {
      case "ecb":
        for (let e = 0; e < n; e++) {
          let r = e * t;
          let i = (e + 1) * t;
          let n = o.slice(r, i);
          let u = a.encrypt(n);
          for (let e = 0; e < t; e++) {
            s[r + e] = u[e];
          }
        }
        break;
      case "cbc":
        let e = De(r);
        for (let r = 0; r < n; r++) {
          let i = r * t;
          let n = (r + 1) * t;
          let u = o.slice(i, n);
          for (let r = 0; r < t; r++) {
            u[r] ^= e[r];
          }
          let c = a.encrypt(u);
          for (let e = 0; e < t; e++) {
            s[i + e] = c[e];
          }
          e = c.slice();
        }
    }
    return nt.from(s);
  }
  decrypt(e, t, r) {
    if ((t = parseInt(t)) <= 32 && !ke.includes(t)) {
      throw `Unsupported block size: ${t * 8} bit`;
    }
    if (t > 32 && (t /= 8, !ke.includes(t))) {
      throw `Unsupported block size: ${t} bit`;
    }
    if (this.mode === "cbc") {
      if (!r) {
        throw `IV is required for mode ${this.mode}`;
      }
      if (r.length !== t) {
        throw `IV size should match with block size (${t * 8} bit)`;
      }
    }
    let o = De(e);
    if (o.length % t != 0) {
      throw `Ciphertext length should be multiple of ${t * 8} bit`;
    }
    let i = o.length / t;
    let n = new Array(o.length);
    let s = new _e(this.key);
    switch (this.mode) {
      case "ecb":
        for (let e = 0; e < i; e++) {
          let r = e * t;
          let i = (e + 1) * t;
          let a = o.slice(r, i);
          let u = s.decrypt(a);
          for (let e = 0; e < t; e++) {
            n[r + e] = u[e];
          }
        }
        break;
      case "cbc":
        let e = De(r);
        for (let r = 0; r < i; r++) {
          let i = r * t;
          let a = (r + 1) * t;
          let u = o.slice(i, a);
          let c = s.decrypt(u);
          for (let r = 0; r < t; r++) {
            n[i + r] = c[r] ^ e[r];
          }
          e = u.slice();
        }
    }
    return nt.from(n);
  }
}
const He = [99, 124, 119, 123, 242, 107, 111, 197, 48, 1, 103, 43, 254, 215, 171, 118, 202, 130, 201, 125, 250, 89, 71, 240, 173, 212, 162, 175, 156, 164, 114, 192, 183, 253, 147, 38, 54, 63, 247, 204, 52, 165, 229, 241, 113, 216, 49, 21, 4, 199, 35, 195, 24, 150, 5, 154, 7, 18, 128, 226, 235, 39, 178, 117, 9, 131, 44, 26, 27, 110, 90, 160, 82, 59, 214, 179, 41, 227, 47, 132, 83, 209, 0, 237, 32, 252, 177, 91, 106, 203, 190, 57, 74, 76, 88, 207, 208, 239, 170, 251, 67, 77, 51, 133, 69, 249, 2, 127, 80, 60, 159, 168, 81, 163, 64, 143, 146, 157, 56, 245, 188, 182, 218, 33, 16, 255, 243, 210, 205, 12, 19, 236, 95, 151, 68, 23, 196, 167, 126, 61, 100, 93, 25, 115, 96, 129, 79, 220, 34, 42, 144, 136, 70, 238, 184, 20, 222, 94, 11, 219, 224, 50, 58, 10, 73, 6, 36, 92, 194, 211, 172, 98, 145, 149, 228, 121, 231, 200, 55, 109, 141, 213, 78, 169, 108, 86, 244, 234, 101, 122, 174, 8, 186, 120, 37, 46, 28, 166, 180, 198, 232, 221, 116, 31, 75, 189, 139, 138, 112, 62, 181, 102, 72, 3, 246, 14, 97, 53, 87, 185, 134, 193, 29, 158, 225, 248, 152, 17, 105, 217, 142, 148, 155, 30, 135, 233, 206, 85, 40, 223, 140, 161, 137, 13, 191, 230, 66, 104, 65, 153, 45, 15, 176, 84, 187, 22];
const Ne = [1, 2, 4, 8, 16, 32, 64, 128, 27, 54, 108, 216, 171, 77, 154, 47, 94, 188, 99, 198, 151, 53, 106, 212, 179, 125, 250, 239, 197, 145];
const We = {
  16: [0, 5, 10, 15, 4, 9, 14, 3, 8, 13, 2, 7, 12, 1, 6, 11],
  24: [0, 5, 10, 15, 4, 9, 14, 19, 8, 13, 18, 23, 12, 17, 22, 3, 16, 21, 2, 7, 20, 1, 6, 11],
  32: [0, 5, 14, 19, 4, 9, 18, 23, 8, 13, 22, 27, 12, 17, 26, 31, 16, 21, 30, 3, 20, 25, 2, 7, 24, 29, 6, 11, 28, 1, 10, 15]
};
const Be = [0, 2, 4, 6, 8, 10, 12, 14, 16, 18, 20, 22, 24, 26, 28, 30, 32, 34, 36, 38, 40, 42, 44, 46, 48, 50, 52, 54, 56, 58, 60, 62, 64, 66, 68, 70, 72, 74, 76, 78, 80, 82, 84, 86, 88, 90, 92, 94, 96, 98, 100, 102, 104, 106, 108, 110, 112, 114, 116, 118, 120, 122, 124, 126, 128, 130, 132, 134, 136, 138, 140, 142, 144, 146, 148, 150, 152, 154, 156, 158, 160, 162, 164, 166, 168, 170, 172, 174, 176, 178, 180, 182, 184, 186, 188, 190, 192, 194, 196, 198, 200, 202, 204, 206, 208, 210, 212, 214, 216, 218, 220, 222, 224, 226, 228, 230, 232, 234, 236, 238, 240, 242, 244, 246, 248, 250, 252, 254, 27, 25, 31, 29, 19, 17, 23, 21, 11, 9, 15, 13, 3, 1, 7, 5, 59, 57, 63, 61, 51, 49, 55, 53, 43, 41, 47, 45, 35, 33, 39, 37, 91, 89, 95, 93, 83, 81, 87, 85, 75, 73, 79, 77, 67, 65, 71, 69, 123, 121, 127, 125, 115, 113, 119, 117, 107, 105, 111, 109, 99, 97, 103, 101, 155, 153, 159, 157, 147, 145, 151, 149, 139, 137, 143, 141, 131, 129, 135, 133, 187, 185, 191, 189, 179, 177, 183, 181, 171, 169, 175, 173, 163, 161, 167, 165, 219, 217, 223, 221, 211, 209, 215, 213, 203, 201, 207, 205, 195, 193, 199, 197, 251, 249, 255, 253, 243, 241, 247, 245, 235, 233, 239, 237, 227, 225, 231, 229];
const Fe = [0, 3, 6, 5, 12, 15, 10, 9, 24, 27, 30, 29, 20, 23, 18, 17, 48, 51, 54, 53, 60, 63, 58, 57, 40, 43, 46, 45, 36, 39, 34, 33, 96, 99, 102, 101, 108, 111, 106, 105, 120, 123, 126, 125, 116, 119, 114, 113, 80, 83, 86, 85, 92, 95, 90, 89, 72, 75, 78, 77, 68, 71, 66, 65, 192, 195, 198, 197, 204, 207, 202, 201, 216, 219, 222, 221, 212, 215, 210, 209, 240, 243, 246, 245, 252, 255, 250, 249, 232, 235, 238, 237, 228, 231, 226, 225, 160, 163, 166, 165, 172, 175, 170, 169, 184, 187, 190, 189, 180, 183, 178, 177, 144, 147, 150, 149, 156, 159, 154, 153, 136, 139, 142, 141, 132, 135, 130, 129, 155, 152, 157, 158, 151, 148, 145, 146, 131, 128, 133, 134, 143, 140, 137, 138, 171, 168, 173, 174, 167, 164, 161, 162, 179, 176, 181, 182, 191, 188, 185, 186, 251, 248, 253, 254, 247, 244, 241, 242, 227, 224, 229, 230, 239, 236, 233, 234, 203, 200, 205, 206, 199, 196, 193, 194, 211, 208, 213, 214, 223, 220, 217, 218, 91, 88, 93, 94, 87, 84, 81, 82, 67, 64, 69, 70, 79, 76, 73, 74, 107, 104, 109, 110, 103, 100, 97, 98, 115, 112, 117, 118, 127, 124, 121, 122, 59, 56, 61, 62, 55, 52, 49, 50, 35, 32, 37, 38, 47, 44, 41, 42, 11, 8, 13, 14, 7, 4, 1, 2, 19, 16, 21, 22, 31, 28, 25, 26];
const qe = [0, 9, 18, 27, 36, 45, 54, 63, 72, 65, 90, 83, 108, 101, 126, 119, 144, 153, 130, 139, 180, 189, 166, 175, 216, 209, 202, 195, 252, 245, 238, 231, 59, 50, 41, 32, 31, 22, 13, 4, 115, 122, 97, 104, 87, 94, 69, 76, 171, 162, 185, 176, 143, 134, 157, 148, 227, 234, 241, 248, 199, 206, 213, 220, 118, 127, 100, 109, 82, 91, 64, 73, 62, 55, 44, 37, 26, 19, 8, 1, 230, 239, 244, 253, 194, 203, 208, 217, 174, 167, 188, 181, 138, 131, 152, 145, 77, 68, 95, 86, 105, 96, 123, 114, 5, 12, 23, 30, 33, 40, 51, 58, 221, 212, 207, 198, 249, 240, 235, 226, 149, 156, 135, 142, 177, 184, 163, 170, 236, 229, 254, 247, 200, 193, 218, 211, 164, 173, 182, 191, 128, 137, 146, 155, 124, 117, 110, 103, 88, 81, 74, 67, 52, 61, 38, 47, 16, 25, 2, 11, 215, 222, 197, 204, 243, 250, 225, 232, 159, 150, 141, 132, 187, 178, 169, 160, 71, 78, 85, 92, 99, 106, 113, 120, 15, 6, 29, 20, 43, 34, 57, 48, 154, 147, 136, 129, 190, 183, 172, 165, 210, 219, 192, 201, 246, 255, 228, 237, 10, 3, 24, 17, 46, 39, 60, 53, 66, 75, 80, 89, 102, 111, 116, 125, 161, 168, 179, 186, 133, 140, 151, 158, 233, 224, 251, 242, 205, 196, 223, 214, 49, 56, 35, 42, 21, 28, 7, 14, 121, 112, 107, 98, 93, 84, 79, 70];
const Ke = [0, 11, 22, 29, 44, 39, 58, 49, 88, 83, 78, 69, 116, 127, 98, 105, 176, 187, 166, 173, 156, 151, 138, 129, 232, 227, 254, 245, 196, 207, 210, 217, 123, 112, 109, 102, 87, 92, 65, 74, 35, 40, 53, 62, 15, 4, 25, 18, 203, 192, 221, 214, 231, 236, 241, 250, 147, 152, 133, 142, 191, 180, 169, 162, 246, 253, 224, 235, 218, 209, 204, 199, 174, 165, 184, 179, 130, 137, 148, 159, 70, 77, 80, 91, 106, 97, 124, 119, 30, 21, 8, 3, 50, 57, 36, 47, 141, 134, 155, 144, 161, 170, 183, 188, 213, 222, 195, 200, 249, 242, 239, 228, 61, 54, 43, 32, 17, 26, 7, 12, 101, 110, 115, 120, 73, 66, 95, 84, 247, 252, 225, 234, 219, 208, 205, 198, 175, 164, 185, 178, 131, 136, 149, 158, 71, 76, 81, 90, 107, 96, 125, 118, 31, 20, 9, 2, 51, 56, 37, 46, 140, 135, 154, 145, 160, 171, 182, 189, 212, 223, 194, 201, 248, 243, 238, 229, 60, 55, 42, 33, 16, 27, 6, 13, 100, 111, 114, 121, 72, 67, 94, 85, 1, 10, 23, 28, 45, 38, 59, 48, 89, 82, 79, 68, 117, 126, 99, 104, 177, 186, 167, 172, 157, 150, 139, 128, 233, 226, 255, 244, 197, 206, 211, 216, 122, 113, 108, 103, 86, 93, 64, 75, 34, 41, 52, 63, 14, 5, 24, 19, 202, 193, 220, 215, 230, 237, 240, 251, 146, 153, 132, 143, 190, 181, 168, 163];
const Ve = [0, 13, 26, 23, 52, 57, 46, 35, 104, 101, 114, 127, 92, 81, 70, 75, 208, 221, 202, 199, 228, 233, 254, 243, 184, 181, 162, 175, 140, 129, 150, 155, 187, 182, 161, 172, 143, 130, 149, 152, 211, 222, 201, 196, 231, 234, 253, 240, 107, 102, 113, 124, 95, 82, 69, 72, 3, 14, 25, 20, 55, 58, 45, 32, 109, 96, 119, 122, 89, 84, 67, 78, 5, 8, 31, 18, 49, 60, 43, 38, 189, 176, 167, 170, 137, 132, 147, 158, 213, 216, 207, 194, 225, 236, 251, 246, 214, 219, 204, 193, 226, 239, 248, 245, 190, 179, 164, 169, 138, 135, 144, 157, 6, 11, 28, 17, 50, 63, 40, 37, 110, 99, 116, 121, 90, 87, 64, 77, 218, 215, 192, 205, 238, 227, 244, 249, 178, 191, 168, 165, 134, 139, 156, 145, 10, 7, 16, 29, 62, 51, 36, 41, 98, 111, 120, 117, 86, 91, 76, 65, 97, 108, 123, 118, 85, 88, 79, 66, 9, 4, 19, 30, 61, 48, 39, 42, 177, 188, 171, 166, 133, 136, 159, 146, 217, 212, 195, 206, 237, 224, 247, 250, 183, 186, 173, 160, 131, 142, 153, 148, 223, 210, 197, 200, 235, 230, 241, 252, 103, 106, 125, 112, 83, 94, 73, 68, 15, 2, 21, 24, 59, 54, 33, 44, 12, 1, 22, 27, 56, 53, 34, 47, 100, 105, 126, 115, 80, 93, 74, 71, 220, 209, 198, 203, 232, 229, 242, 255, 180, 185, 174, 163, 128, 141, 154, 151];
const Xe = [0, 14, 28, 18, 56, 54, 36, 42, 112, 126, 108, 98, 72, 70, 84, 90, 224, 238, 252, 242, 216, 214, 196, 202, 144, 158, 140, 130, 168, 166, 180, 186, 219, 213, 199, 201, 227, 237, 255, 241, 171, 165, 183, 185, 147, 157, 143, 129, 59, 53, 39, 41, 3, 13, 31, 17, 75, 69, 87, 89, 115, 125, 111, 97, 173, 163, 177, 191, 149, 155, 137, 135, 221, 211, 193, 207, 229, 235, 249, 247, 77, 67, 81, 95, 117, 123, 105, 103, 61, 51, 33, 47, 5, 11, 25, 23, 118, 120, 106, 100, 78, 64, 82, 92, 6, 8, 26, 20, 62, 48, 34, 44, 150, 152, 138, 132, 174, 160, 178, 188, 230, 232, 250, 244, 222, 208, 194, 204, 65, 79, 93, 83, 121, 119, 101, 107, 49, 63, 45, 35, 9, 7, 21, 27, 161, 175, 189, 179, 153, 151, 133, 139, 209, 223, 205, 195, 233, 231, 245, 251, 154, 148, 134, 136, 162, 172, 190, 176, 234, 228, 246, 248, 210, 220, 206, 192, 122, 116, 102, 104, 66, 76, 94, 80, 10, 4, 22, 24, 50, 60, 46, 32, 236, 226, 240, 254, 212, 218, 200, 198, 156, 146, 128, 142, 164, 170, 184, 182, 12, 2, 16, 30, 52, 58, 40, 38, 124, 114, 96, 110, 68, 74, 88, 86, 55, 57, 43, 37, 15, 1, 19, 29, 71, 73, 91, 85, 127, 113, 99, 109, 215, 217, 203, 197, 239, 225, 243, 253, 167, 169, 187, 181, 159, 145, 131, 141];
var ze = [];
var je = [];
var $e = typeof Uint8Array != "undefined" ? Uint8Array : Array;
var Je = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/";
for (var Ye = 0, Qe = Je.length; Ye < Qe; ++Ye) {
  ze[Ye] = Je[Ye];
  je[Je.charCodeAt(Ye)] = Ye;
}
function Ze() {}
function et(e) {
  var t = e.length;
  if (t % 4 > 0) {
    throw new Error("Invalid string. Length must be a multiple of 4");
  }
  var r = e.indexOf("=");
  if (r === -1) {
    r = t;
  }
  return [r, r === t ? 0 : 4 - r % 4];
}
function tt(e) {
  var t = et(e);
  var r = t[0];
  var o = t[1];
  return (r + o) * 3 / 4 - o;
}
function rt(e, t, r) {
  return (t + r) * 3 / 4 - r;
}
function ot(e) {
  return ze[e >> 18 & 63] + ze[e >> 12 & 63] + ze[e >> 6 & 63] + ze[e & 63];
}
function it(e, t, r) {
  var o;
  var i = [];
  for (var n = t; n < r; n += 3) {
    o = (e[n] << 16 & 16711680) + (e[n + 1] << 8 & 65280) + (e[n + 2] & 255);
    i.push(ot(o));
  }
  return i.join("");
}
je["-".charCodeAt(0)] = 62;
je["_".charCodeAt(0)] = 63;
Ze.prototype.toByteArray = function (e) {
  var t;
  var r = et(e);
  var o = r[0];
  var i = r[1];
  var n = new $e(rt(e, o, i));
  var s = 0;
  for (var a = i > 0 ? o - 4 : o, u = 0; u < a; u += 4) {
    t = je[e.charCodeAt(u)] << 18 | je[e.charCodeAt(u + 1)] << 12 | je[e.charCodeAt(u + 2)] << 6 | je[e.charCodeAt(u + 3)];
    n[s++] = t >> 16 & 255;
    n[s++] = t >> 8 & 255;
    n[s++] = t & 255;
  }
  if (i === 2) {
    t = je[e.charCodeAt(u)] << 2 | je[e.charCodeAt(u + 1)] >> 4;
    n[s++] = t & 255;
  }
  if (i === 1) {
    t = je[e.charCodeAt(u)] << 10 | je[e.charCodeAt(u + 1)] << 4 | je[e.charCodeAt(u + 2)] >> 2;
    n[s++] = t >> 8 & 255;
    n[s++] = t & 255;
  }
  return n;
};
Ze.prototype.fromByteArray = function (e) {
  var t;
  var r = e.length;
  var o = r % 3;
  var i = [];
  for (var n = 0, s = r - o; n < s; n += 16383) {
    i.push(it(e, n, n + 16383 > s ? s : n + 16383));
  }
  if (o === 1) {
    t = e[r - 1];
    i.push(ze[t >> 2] + ze[t << 4 & 63] + "==");
  } else if (o === 2) {
    t = (e[r - 2] << 8) + e[r - 1];
    i.push(ze[t >> 10] + ze[t >> 4 & 63] + ze[t << 2 & 63] + "=");
  }
  return i.join("");
};
var nt;
var Ze = Ze.prototype;
var st = st;
const at = 50;
var ut = 2147483647;
var ct = ut;
function lt() {
  try {
    var e = new Uint8Array(1);
    e.__proto__ = {
      __proto__: Uint8Array.prototype,
      foo: function () {
        return 42;
      }
    };
    return e.foo() === 42;
  } catch (e) {
    return false;
  }
}
function dt(e) {
  if (e > ut) {
    throw new RangeError("Invalid typed array length");
  }
  var t = new Uint8Array(e);
  t.__proto__ = nt.prototype;
  return t;
}
function nt(e, t, r) {
  if (typeof e == "number") {
    if (typeof t == "string") {
      throw new Error("If encoding is specified then the first argument must be a string");
    }
    return ft(e);
  }
  return gt(e, t, r);
}
function gt(e, t, r) {
  if (typeof e == "number") {
    throw new TypeError("\"value\" argument must not be a number");
  }
  if (Qt(e) || e && Qt(e.buffer)) {
    return yt(e, t, r);
  } else if (typeof e == "string") {
    return mt(e, t);
  } else {
    return St(e);
  }
}
function ht(e) {
  if (typeof e != "number") {
    throw new TypeError("\"size\" argument must be of type number");
  }
  if (e < 0) {
    throw new RangeError("\"size\" argument must not be negative");
  }
}
function pt(e, t, r) {
  ht(e);
  if (e <= 0) {
    return dt(e);
  } else if (t !== undefined) {
    if (typeof r == "string") {
      return dt(e).fill(t, r);
    } else {
      return dt(e).fill(t);
    }
  } else {
    return dt(e);
  }
}
function ft(e) {
  ht(e);
  return dt(e < 0 ? 0 : Ct(e) | 0);
}
function mt(e, t) {
  if (typeof t != "string" || t === "") {
    t = "utf8";
  }
  if (!nt.isEncoding(t)) {
    throw new TypeError("Unknown encoding: " + t);
  }
  var r = tt(e, t) | 0;
  var o = dt(r);
  var i = o.write(e, t);
  if (i !== r) {
    o = o.slice(0, i);
  }
  return o;
}
function vt(e) {
  for (var t = e.length < 0 ? 0 : Ct(e.length) | 0, r = dt(t), o = 0; o < t; o += 1) {
    r[o] = e[o] & 255;
  }
  return r;
}
function yt(e, t, r) {
  if (t < 0 || e.byteLength < t) {
    throw new RangeError("\"offset\" is outside of buffer bounds");
  }
  if (e.byteLength < t + (r || 0)) {
    throw new RangeError("\"length\" is outside of buffer bounds");
  }
  var o;
  (o = t === undefined && r === undefined ? new Uint8Array(e) : r === undefined ? new Uint8Array(e, t) : new Uint8Array(e, t, r)).__proto__ = nt.prototype;
  return o;
}
function St(e) {
  if (nt.isBuffer(e)) {
    var t = Ct(e.length) | 0;
    var r = dt(t);
    if (r.length === 0) {
      return r;
    } else {
      e.copy(r, 0, 0, t);
      return r;
    }
  }
  if (e) {
    if (ArrayBuffer.isView(e) || "length" in e) {
      if (typeof e.length != "number" || Zt(e.length)) {
        return dt(0);
      } else {
        return vt(e);
      }
    }
    if (e.type === "Buffer" && Array.isArray(e.data)) {
      return vt(e.data);
    }
  }
  throw new TypeError("The first argument must be one of type string, Buffer, ArrayBuffer, Array, or Array-like Object.");
}
function Ct(e) {
  if (e >= ut) {
    throw new RangeError("Attempt to allocate Buffer larger than maximum size: 0x" + ut.toString(16) + " bytes");
  }
  return e | 0;
}
function st(e) {
  if (+e != e) {
    e = 0;
  }
  return nt.alloc(+e);
}
function tt(e, t) {
  if (nt.isBuffer(e)) {
    return e.length;
  }
  if (ArrayBuffer.isView(e) || Qt(e)) {
    return e.byteLength;
  }
  if (typeof e != "string") {
    e = "" + e;
  }
  var r = e.length;
  if (r === 0) {
    return 0;
  }
  var o = false;
  for (;;) {
    switch (t) {
      case "ascii":
      case "latin1":
      case "binary":
        return r;
      case "utf8":
      case "utf-8":
      case undefined:
        return zt(e).length;
      case "ucs2":
      case "ucs-2":
      case "utf16le":
      case "utf-16le":
        return r * 2;
      case "hex":
        return r >>> 1;
      case "base64":
        return Jt(e).length;
      default:
        if (o) {
          return zt(e).length;
        }
        t = ("" + t).toLowerCase();
        o = true;
    }
  }
}
function Pt(e, t, r) {
  var o = false;
  if (t === undefined || t < 0) {
    t = 0;
  }
  if (t > this.length) {
    return "";
  }
  if (r === undefined || r > this.length) {
    r = this.length;
  }
  if (r <= 0) {
    return "";
  }
  if ((r >>>= 0) <= (t >>>= 0)) {
    return "";
  }
  for (e ||= "utf8";;) {
    switch (e) {
      case "hex":
        return Tt(this, t, r);
      case "utf8":
      case "utf-8":
        return Dt(this, t, r);
      case "ascii":
        return _t(this, t, r);
      case "latin1":
      case "binary":
        return Mt(this, t, r);
      case "base64":
        return Et(this, t, r);
      case "ucs2":
      case "ucs-2":
      case "utf16le":
      case "utf-16le":
        return Ht(this, t, r);
      default:
        if (o) {
          throw new TypeError("Unknown encoding: " + e);
        }
        e = (e + "").toLowerCase();
        o = true;
    }
  }
}
function At(e, t, r) {
  var o = e[t];
  e[t] = e[r];
  e[r] = o;
}
function bt(e, t, r, o, i) {
  if (e.length === 0) {
    return -1;
  }
  if (typeof r == "string") {
    o = r;
    r = 0;
  } else if (r > 2147483647) {
    r = 2147483647;
  } else if (r < -2147483648) {
    r = -2147483648;
  }
  if (Zt(r = +r)) {
    r = i ? 0 : e.length - 1;
  }
  if (r < 0) {
    r = e.length + r;
  }
  if (r >= e.length) {
    if (i) {
      return -1;
    }
    r = e.length - 1;
  } else if (r < 0) {
    if (!i) {
      return -1;
    }
    r = 0;
  }
  if (typeof t == "string") {
    t = nt.from(t, o);
  }
  if (nt.isBuffer(t)) {
    if (t.length === 0) {
      return -1;
    } else {
      return wt(e, t, r, o, i);
    }
  }
  if (typeof t == "number") {
    t &= 255;
    if (typeof Uint8Array.prototype.indexOf == "function") {
      if (i) {
        return Uint8Array.prototype.indexOf.call(e, t, r);
      } else {
        return Uint8Array.prototype.lastIndexOf.call(e, t, r);
      }
    } else {
      return wt(e, [t], r, o, i);
    }
  }
  throw new TypeError("val must be string, number or Buffer");
}
function wt(e, t, r, o, i) {
  var n;
  var s = 1;
  var a = e.length;
  var u = t.length;
  if (o !== undefined && ((o = String(o).toLowerCase()) === "ucs2" || o === "ucs-2" || o === "utf16le" || o === "utf-16le")) {
    if (e.length < 2 || t.length < 2) {
      return -1;
    }
    s = 2;
    a /= 2;
    u /= 2;
    r /= 2;
  }
  function c(e, t) {
    if (s === 1) {
      return e[t];
    } else {
      return e.readUInt16BE(t * s);
    }
  }
  if (i) {
    var l = -1;
    for (n = r; n < a; n++) {
      if (c(e, n) === c(t, l === -1 ? 0 : n - l)) {
        if (l === -1) {
          l = n;
        }
        if (n - l + 1 === u) {
          return l * s;
        }
      } else {
        if (l !== -1) {
          n -= n - l;
        }
        l = -1;
      }
    }
  } else {
    if (r + u > a) {
      r = a - u;
    }
    n = r;
    for (; n >= 0; n--) {
      var d = true;
      for (var g = 0; g < u; g++) {
        if (c(e, n + g) !== c(t, g)) {
          d = false;
          break;
        }
      }
      if (d) {
        return n;
      }
    }
  }
  return -1;
}
function Rt(e, t, r, o) {
  r = Number(r) || 0;
  var i = e.length - r;
  if (o) {
    if ((o = Number(o)) > i) {
      o = i;
    }
  } else {
    o = i;
  }
  var n = t.length;
  if (o > n / 2) {
    o = n / 2;
  }
  for (var s = 0; s < o; ++s) {
    var a = parseInt(t.substr(s * 2, 2), 16);
    if (Zt(a)) {
      return s;
    }
    e[r + s] = a;
  }
  return s;
}
function Ot(e, t, r, o) {
  return Yt(zt(t, e.length - r), e, r, o);
}
function Ut(e, t, r, o) {
  return Yt(jt(t), e, r, o);
}
function It(e, t, r, o) {
  return Ut(e, t, r, o);
}
function Lt(e, t, r, o) {
  return Yt(Jt(t), e, r, o);
}
function xt(e, t, r, o) {
  return Yt($t(t, e.length - r), e, r, o);
}
function Et(e, t, r) {
  if (t === 0 && r === e.length) {
    return Ze.fromByteArray(e);
  } else {
    return Ze.fromByteArray(e.slice(t, r));
  }
}
function Dt(e, t, r) {
  r = Math.min(e.length, r);
  var o = [];
  for (var i = t; i < r;) {
    var n;
    var s;
    var a;
    var u;
    var c = e[i];
    var l = null;
    var d = c > 239 ? 4 : c > 223 ? 3 : c > 191 ? 2 : 1;
    if (i + d <= r) {
      switch (d) {
        case 1:
          if (c < 128) {
            l = c;
          }
          break;
        case 2:
          if (((n = e[i + 1]) & 192) == 128 && (u = (c & 31) << 6 | n & 63) > 127) {
            l = u;
          }
          break;
        case 3:
          n = e[i + 1];
          s = e[i + 2];
          if ((n & 192) == 128 && (s & 192) == 128 && (u = (c & 15) << 12 | (n & 63) << 6 | s & 63) > 2047 && (u < 55296 || u > 57343)) {
            l = u;
          }
          break;
        case 4:
          n = e[i + 1];
          s = e[i + 2];
          a = e[i + 3];
          if ((n & 192) == 128 && (s & 192) == 128 && (a & 192) == 128 && (u = (c & 15) << 18 | (n & 63) << 12 | (s & 63) << 6 | a & 63) > 65535 && u < 1114112) {
            l = u;
          }
      }
    }
    if (l === null) {
      l = 65533;
      d = 1;
    } else if (l > 65535) {
      l -= 65536;
      o.push(l >>> 10 & 1023 | 55296);
      l = l & 1023 | 56320;
    }
    o.push(l);
    i += d;
  }
  return Gt(o);
}
(nt = nt).TYPED_ARRAY_SUPPORT = lt();
if (!nt.TYPED_ARRAY_SUPPORT && typeof console != "undefined" && typeof console.error == "function") {
  console.error("This browser lacks typed array (Uint8Array) support which is required by `buffer` v5.x. Use `buffer` v4.x if you require old browser support.");
}
Object.defineProperty(nt.prototype, "parent", {
  get: function () {
    if (this instanceof nt) {
      return this.buffer;
    }
  }
});
Object.defineProperty(nt.prototype, "offset", {
  get: function () {
    if (this instanceof nt) {
      return this.byteOffset;
    }
  }
});
if (typeof Symbol != "undefined" && Symbol.species && nt[Symbol.species] === nt) {
  Object.defineProperty(nt, Symbol.species, {
    value: null,
    configurable: true,
    enumerable: false,
    writable: false
  });
}
nt.poolSize = 8192;
nt.from = function (e, t, r) {
  return gt(e, t, r);
};
nt.prototype.__proto__ = Uint8Array.prototype;
nt.__proto__ = Uint8Array;
nt.alloc = function (e, t, r) {
  return pt(e, t, r);
};
nt.allocUnsafe = function (e) {
  return ft(e);
};
nt.allocUnsafeSlow = function (e) {
  return ft(e);
};
nt.isBuffer = function (e) {
  return e != null && e._isBuffer === true;
};
nt.compare = function (e, t) {
  if (!nt.isBuffer(e) || !nt.isBuffer(t)) {
    throw new TypeError("Arguments must be Buffers");
  }
  if (e === t) {
    return 0;
  }
  var r = e.length;
  var o = t.length;
  for (var i = 0, n = Math.min(r, o); i < n; ++i) {
    if (e[i] !== t[i]) {
      r = e[i];
      o = t[i];
      break;
    }
  }
  if (r < o) {
    return -1;
  } else if (o < r) {
    return 1;
  } else {
    return 0;
  }
};
nt.isEncoding = function (e) {
  switch (String(e).toLowerCase()) {
    case "hex":
    case "utf8":
    case "utf-8":
    case "ascii":
    case "latin1":
    case "binary":
    case "base64":
    case "ucs2":
    case "ucs-2":
    case "utf16le":
    case "utf-16le":
      return true;
    default:
      return false;
  }
};
nt.concat = function (e, t) {
  if (!Array.isArray(e)) {
    throw new TypeError("\"list\" argument must be an Array of Buffers");
  }
  if (e.length === 0) {
    return nt.alloc(0);
  }
  var r;
  if (t === undefined) {
    t = 0;
    r = 0;
    for (; r < e.length; ++r) {
      t += e[r].length;
    }
  }
  var o = nt.allocUnsafe(t);
  var i = 0;
  for (r = 0; r < e.length; ++r) {
    var n = e[r];
    if (ArrayBuffer.isView(n)) {
      n = nt.from(n);
    }
    if (!nt.isBuffer(n)) {
      throw new TypeError("\"list\" argument must be an Array of Buffers");
    }
    n.copy(o, i);
    i += n.length;
  }
  return o;
};
nt.byteLength = tt;
nt.prototype._isBuffer = true;
nt.prototype.swap16 = function () {
  var e = this.length;
  if (e % 2 != 0) {
    throw new RangeError("Buffer size must be a multiple of 16-bits");
  }
  for (var t = 0; t < e; t += 2) {
    At(this, t, t + 1);
  }
  return this;
};
nt.prototype.swap32 = function () {
  var e = this.length;
  if (e % 4 != 0) {
    throw new RangeError("Buffer size must be a multiple of 32-bits");
  }
  for (var t = 0; t < e; t += 4) {
    At(this, t, t + 3);
    At(this, t + 1, t + 2);
  }
  return this;
};
nt.prototype.swap64 = function () {
  var e = this.length;
  if (e % 8 != 0) {
    throw new RangeError("Buffer size must be a multiple of 64-bits");
  }
  for (var t = 0; t < e; t += 8) {
    At(this, t, t + 7);
    At(this, t + 1, t + 6);
    At(this, t + 2, t + 5);
    At(this, t + 3, t + 4);
  }
  return this;
};
nt.prototype.toString = function () {
  var e = this.length;
  if (e === 0) {
    return "";
  } else if (arguments.length === 0) {
    return Dt(this, 0, e);
  } else {
    return Pt.apply(this, arguments);
  }
};
nt.prototype.toLocaleString = nt.prototype.toString;
nt.prototype.equals = function (e) {
  if (!nt.isBuffer(e)) {
    throw new TypeError("Argument must be a Buffer");
  }
  return this === e || nt.compare(this, e) === 0;
};
nt.prototype.inspect = function () {
  var e = "";
  if (this.length > 0) {
    e = this.toString("hex", 0, 50).match(/.{2}/g).join(" ");
    if (this.length > 50) {
      e += " ... ";
    }
  }
  return "<Buffer " + e + ">";
};
nt.prototype.compare = function (e, t, r, o, i) {
  if (!nt.isBuffer(e)) {
    throw new TypeError("Argument must be a Buffer");
  }
  if (t === undefined) {
    t = 0;
  }
  if (r === undefined) {
    r = e ? e.length : 0;
  }
  if (o === undefined) {
    o = 0;
  }
  if (i === undefined) {
    i = this.length;
  }
  if (t < 0 || r > e.length || o < 0 || i > this.length) {
    throw new RangeError("out of range index");
  }
  if (o >= i && t >= r) {
    return 0;
  }
  if (o >= i) {
    return -1;
  }
  if (t >= r) {
    return 1;
  }
  t >>>= 0;
  r >>>= 0;
  o >>>= 0;
  i >>>= 0;
  if (this === e) {
    return 0;
  }
  var n = i - o;
  var s = r - t;
  for (var a = Math.min(n, s), u = this.slice(o, i), c = e.slice(t, r), l = 0; l < a; ++l) {
    if (u[l] !== c[l]) {
      n = u[l];
      s = c[l];
      break;
    }
  }
  if (n < s) {
    return -1;
  } else if (s < n) {
    return 1;
  } else {
    return 0;
  }
};
nt.prototype.includes = function (e, t, r) {
  return this.indexOf(e, t, r) !== -1;
};
nt.prototype.indexOf = function (e, t, r) {
  return bt(this, e, t, r, true);
};
nt.prototype.lastIndexOf = function (e, t, r) {
  return bt(this, e, t, r, false);
};
nt.prototype.write = function (e, t, r, o) {
  if (t === undefined) {
    o = "utf8";
    r = this.length;
    t = 0;
  } else if (r === undefined && typeof t == "string") {
    o = t;
    r = this.length;
    t = 0;
  } else {
    if (!isFinite(t)) {
      throw new Error("Buffer.write(string, encoding, offset[, length]) is no longer supported");
    }
    t >>>= 0;
    if (isFinite(r)) {
      r >>>= 0;
      if (o === undefined) {
        o = "utf8";
      }
    } else {
      o = r;
      r = undefined;
    }
  }
  var i = this.length - t;
  if (r === undefined || r > i) {
    r = i;
  }
  if (e.length > 0 && (r < 0 || t < 0) || t > this.length) {
    throw new RangeError("Attempt to write outside buffer bounds");
  }
  o ||= "utf8";
  var n = false;
  for (;;) {
    switch (o) {
      case "hex":
        return Rt(this, e, t, r);
      case "utf8":
      case "utf-8":
        return Ot(this, e, t, r);
      case "ascii":
        return Ut(this, e, t, r);
      case "latin1":
      case "binary":
        return It(this, e, t, r);
      case "base64":
        return Lt(this, e, t, r);
      case "ucs2":
      case "ucs-2":
      case "utf16le":
      case "utf-16le":
        return xt(this, e, t, r);
      default:
        if (n) {
          throw new TypeError("Unknown encoding: " + o);
        }
        o = ("" + o).toLowerCase();
        n = true;
    }
  }
};
nt.prototype.toJSON = function () {
  return {
    type: "Buffer",
    data: Array.prototype.slice.call(this._arr || this, 0)
  };
};
var kt = 4096;
function Gt(e) {
  var t = e.length;
  if (t <= kt) {
    return String.fromCharCode.apply(String, e);
  }
  var r = "";
  for (var o = 0; o < t;) {
    r += String.fromCharCode.apply(String, e.slice(o, o += kt));
  }
  return r;
}
function _t(e, t, r) {
  var o = "";
  r = Math.min(e.length, r);
  for (var i = t; i < r; ++i) {
    o += String.fromCharCode(e[i] & 127);
  }
  return o;
}
function Mt(e, t, r) {
  var o = "";
  r = Math.min(e.length, r);
  for (var i = t; i < r; ++i) {
    o += String.fromCharCode(e[i]);
  }
  return o;
}
function Tt(e, t, r) {
  var o = e.length;
  if (!t || t < 0) {
    t = 0;
  }
  if (!r || r < 0 || r > o) {
    r = o;
  }
  var i = "";
  for (var n = t; n < r; ++n) {
    i += Xt(e[n]);
  }
  return i;
}
function Ht(e, t, r) {
  for (var o = e.slice(t, r), i = "", n = 0; n < o.length; n += 2) {
    i += String.fromCharCode(o[n] + o[n + 1] * 256);
  }
  return i;
}
function Nt(e, t, r) {
  if (e % 1 != 0 || e < 0) {
    throw new RangeError("offset is not uint");
  }
  if (e + t > r) {
    throw new RangeError("Trying to access beyond buffer length");
  }
}
function Wt(e, t, r, o, i, n) {
  if (!nt.isBuffer(e)) {
    throw new TypeError("\"buffer\" argument must be a Buffer instance");
  }
  if (t > i || t < n) {
    throw new RangeError("\"value\" argument is out of bounds");
  }
  if (r + o > e.length) {
    throw new RangeError("Index out of range");
  }
}
function Bt(e, t, r, o, i, n) {
  if (r + o > e.length) {
    throw new RangeError("Index out of range");
  }
  if (r < 0) {
    throw new RangeError("Index out of range");
  }
}
function Ft(e, t, r, o, i) {
  t = +t;
  r >>>= 0;
  if (!i) {
    Bt(e, t, r, 4, 3.4028234663852886e+38, -3.4028234663852886e+38);
  }
  tr(e, t, r, o, 23, 4);
  return r + 4;
}
function qt(e, t, r, o, i) {
  t = +t;
  r >>>= 0;
  if (!i) {
    Bt(e, t, r, 8, 1.7976931348623157e+308, -1.7976931348623157e+308);
  }
  tr(e, t, r, o, 52, 8);
  return r + 8;
}
nt.prototype.slice = function (e, t) {
  var r = this.length;
  e = ~~e;
  t = t === undefined ? r : ~~t;
  if (e < 0) {
    if ((e += r) < 0) {
      e = 0;
    }
  } else if (e > r) {
    e = r;
  }
  if (t < 0) {
    if ((t += r) < 0) {
      t = 0;
    }
  } else if (t > r) {
    t = r;
  }
  if (t < e) {
    t = e;
  }
  var o = this.subarray(e, t);
  o.__proto__ = nt.prototype;
  return o;
};
nt.prototype.readUIntLE = function (e, t, r) {
  e >>>= 0;
  t >>>= 0;
  if (!r) {
    Nt(e, t, this.length);
  }
  var o = this[e];
  for (var i = 1, n = 0; ++n < t && (i *= 256);) {
    o += this[e + n] * i;
  }
  return o;
};
nt.prototype.readUIntBE = function (e, t, r) {
  e >>>= 0;
  t >>>= 0;
  if (!r) {
    Nt(e, t, this.length);
  }
  var o = this[e + --t];
  for (var i = 1; t > 0 && (i *= 256);) {
    o += this[e + --t] * i;
  }
  return o;
};
nt.prototype.readUInt8 = function (e, t) {
  e >>>= 0;
  if (!t) {
    Nt(e, 1, this.length);
  }
  return this[e];
};
nt.prototype.readUInt16LE = function (e, t) {
  e >>>= 0;
  if (!t) {
    Nt(e, 2, this.length);
  }
  return this[e] | this[e + 1] << 8;
};
nt.prototype.readUInt16BE = function (e, t) {
  e >>>= 0;
  if (!t) {
    Nt(e, 2, this.length);
  }
  return this[e] << 8 | this[e + 1];
};
nt.prototype.readUInt32LE = function (e, t) {
  e >>>= 0;
  if (!t) {
    Nt(e, 4, this.length);
  }
  return (this[e] | this[e + 1] << 8 | this[e + 2] << 16) + this[e + 3] * 16777216;
};
nt.prototype.readUInt32BE = function (e, t) {
  e >>>= 0;
  if (!t) {
    Nt(e, 4, this.length);
  }
  return this[e] * 16777216 + (this[e + 1] << 16 | this[e + 2] << 8 | this[e + 3]);
};
nt.prototype.readIntLE = function (e, t, r) {
  e >>>= 0;
  t >>>= 0;
  if (!r) {
    Nt(e, t, this.length);
  }
  var o = this[e];
  for (var i = 1, n = 0; ++n < t && (i *= 256);) {
    o += this[e + n] * i;
  }
  if (o >= (i *= 128)) {
    o -= Math.pow(2, t * 8);
  }
  return o;
};
nt.prototype.readIntBE = function (e, t, r) {
  e >>>= 0;
  t >>>= 0;
  if (!r) {
    Nt(e, t, this.length);
  }
  for (var o = t, i = 1, n = this[e + --o]; o > 0 && (i *= 256);) {
    n += this[e + --o] * i;
  }
  if (n >= (i *= 128)) {
    n -= Math.pow(2, t * 8);
  }
  return n;
};
nt.prototype.readInt8 = function (e, t) {
  e >>>= 0;
  if (!t) {
    Nt(e, 1, this.length);
  }
  if (this[e] & 128) {
    return (255 - this[e] + 1) * -1;
  } else {
    return this[e];
  }
};
nt.prototype.readInt16LE = function (e, t) {
  e >>>= 0;
  if (!t) {
    Nt(e, 2, this.length);
  }
  var r = this[e] | this[e + 1] << 8;
  if (r & 32768) {
    return r | 4294901760;
  } else {
    return r;
  }
};
nt.prototype.readInt16BE = function (e, t) {
  e >>>= 0;
  if (!t) {
    Nt(e, 2, this.length);
  }
  var r = this[e + 1] | this[e] << 8;
  if (r & 32768) {
    return r | 4294901760;
  } else {
    return r;
  }
};
nt.prototype.readInt32LE = function (e, t) {
  e >>>= 0;
  if (!t) {
    Nt(e, 4, this.length);
  }
  return this[e] | this[e + 1] << 8 | this[e + 2] << 16 | this[e + 3] << 24;
};
nt.prototype.readInt32BE = function (e, t) {
  e >>>= 0;
  if (!t) {
    Nt(e, 4, this.length);
  }
  return this[e] << 24 | this[e + 1] << 16 | this[e + 2] << 8 | this[e + 3];
};
nt.prototype.readFloatLE = function (e, t) {
  e >>>= 0;
  if (!t) {
    Nt(e, 4, this.length);
  }
  return er(this, e, true, 23, 4);
};
nt.prototype.readFloatBE = function (e, t) {
  e >>>= 0;
  if (!t) {
    Nt(e, 4, this.length);
  }
  return er(this, e, false, 23, 4);
};
nt.prototype.readDoubleLE = function (e, t) {
  e >>>= 0;
  if (!t) {
    Nt(e, 8, this.length);
  }
  return er(this, e, true, 52, 8);
};
nt.prototype.readDoubleBE = function (e, t) {
  e >>>= 0;
  if (!t) {
    Nt(e, 8, this.length);
  }
  return er(this, e, false, 52, 8);
};
nt.prototype.writeUIntLE = function (e, t, r, o) {
  if (!(e = +e, t >>>= 0, r >>>= 0, o)) {
    Wt(this, e, t, r, Math.pow(2, r * 8) - 1, 0);
  }
  var i = 1;
  var n = 0;
  for (this[t] = e & 255; ++n < r && (i *= 256);) {
    this[t + n] = e / i & 255;
  }
  return t + r;
};
nt.prototype.writeUIntBE = function (e, t, r, o) {
  if (!(e = +e, t >>>= 0, r >>>= 0, o)) {
    Wt(this, e, t, r, Math.pow(2, r * 8) - 1, 0);
  }
  var i = r - 1;
  var n = 1;
  for (this[t + i] = e & 255; --i >= 0 && (n *= 256);) {
    this[t + i] = e / n & 255;
  }
  return t + r;
};
nt.prototype.writeUInt8 = function (e, t, r) {
  e = +e;
  t >>>= 0;
  if (!r) {
    Wt(this, e, t, 1, 255, 0);
  }
  this[t] = e & 255;
  return t + 1;
};
nt.prototype.writeUInt16LE = function (e, t, r) {
  e = +e;
  t >>>= 0;
  if (!r) {
    Wt(this, e, t, 2, 65535, 0);
  }
  this[t] = e & 255;
  this[t + 1] = e >>> 8;
  return t + 2;
};
nt.prototype.writeUInt16BE = function (e, t, r) {
  e = +e;
  t >>>= 0;
  if (!r) {
    Wt(this, e, t, 2, 65535, 0);
  }
  this[t] = e >>> 8;
  this[t + 1] = e & 255;
  return t + 2;
};
nt.prototype.writeUInt32LE = function (e, t, r) {
  e = +e;
  t >>>= 0;
  if (!r) {
    Wt(this, e, t, 4, 4294967295, 0);
  }
  this[t + 3] = e >>> 24;
  this[t + 2] = e >>> 16;
  this[t + 1] = e >>> 8;
  this[t] = e & 255;
  return t + 4;
};
nt.prototype.writeUInt32BE = function (e, t, r) {
  e = +e;
  t >>>= 0;
  if (!r) {
    Wt(this, e, t, 4, 4294967295, 0);
  }
  this[t] = e >>> 24;
  this[t + 1] = e >>> 16;
  this[t + 2] = e >>> 8;
  this[t + 3] = e & 255;
  return t + 4;
};
nt.prototype.writeIntLE = function (e, t, r, o) {
  e = +e;
  t >>>= 0;
  if (!o) {
    var i = Math.pow(2, r * 8 - 1);
    Wt(this, e, t, r, i - 1, -i);
  }
  var n = 0;
  var s = 1;
  var a = 0;
  for (this[t] = e & 255; ++n < r && (s *= 256);) {
    if (e < 0 && a === 0 && this[t + n - 1] !== 0) {
      a = 1;
    }
    this[t + n] = (e / s >> 0) - a & 255;
  }
  return t + r;
};
nt.prototype.writeIntBE = function (e, t, r, o) {
  e = +e;
  t >>>= 0;
  if (!o) {
    var i = Math.pow(2, r * 8 - 1);
    Wt(this, e, t, r, i - 1, -i);
  }
  var n = r - 1;
  var s = 1;
  var a = 0;
  for (this[t + n] = e & 255; --n >= 0 && (s *= 256);) {
    if (e < 0 && a === 0 && this[t + n + 1] !== 0) {
      a = 1;
    }
    this[t + n] = (e / s >> 0) - a & 255;
  }
  return t + r;
};
nt.prototype.writeInt8 = function (e, t, r) {
  e = +e;
  t >>>= 0;
  if (!r) {
    Wt(this, e, t, 1, 127, -128);
  }
  if (e < 0) {
    e = 255 + e + 1;
  }
  this[t] = e & 255;
  return t + 1;
};
nt.prototype.writeInt16LE = function (e, t, r) {
  e = +e;
  t >>>= 0;
  if (!r) {
    Wt(this, e, t, 2, 32767, -32768);
  }
  this[t] = e & 255;
  this[t + 1] = e >>> 8;
  return t + 2;
};
nt.prototype.writeInt16BE = function (e, t, r) {
  e = +e;
  t >>>= 0;
  if (!r) {
    Wt(this, e, t, 2, 32767, -32768);
  }
  this[t] = e >>> 8;
  this[t + 1] = e & 255;
  return t + 2;
};
nt.prototype.writeInt32LE = function (e, t, r) {
  e = +e;
  t >>>= 0;
  if (!r) {
    Wt(this, e, t, 4, 2147483647, -2147483648);
  }
  this[t] = e & 255;
  this[t + 1] = e >>> 8;
  this[t + 2] = e >>> 16;
  this[t + 3] = e >>> 24;
  return t + 4;
};
nt.prototype.writeInt32BE = function (e, t, r) {
  e = +e;
  t >>>= 0;
  if (!r) {
    Wt(this, e, t, 4, 2147483647, -2147483648);
  }
  if (e < 0) {
    e = 4294967295 + e + 1;
  }
  this[t] = e >>> 24;
  this[t + 1] = e >>> 16;
  this[t + 2] = e >>> 8;
  this[t + 3] = e & 255;
  return t + 4;
};
nt.prototype.writeFloatLE = function (e, t, r) {
  return Ft(this, e, t, true, r);
};
nt.prototype.writeFloatBE = function (e, t, r) {
  return Ft(this, e, t, false, r);
};
nt.prototype.writeDoubleLE = function (e, t, r) {
  return qt(this, e, t, true, r);
};
nt.prototype.writeDoubleBE = function (e, t, r) {
  return qt(this, e, t, false, r);
};
nt.prototype.copy = function (e, t, r, o) {
  if (!nt.isBuffer(e)) {
    throw new TypeError("argument should be a Buffer");
  }
  r ||= 0;
  if (!o && o !== 0) {
    o = this.length;
  }
  if (t >= e.length) {
    t = e.length;
  }
  t ||= 0;
  if (o > 0 && o < r) {
    o = r;
  }
  if (o === r) {
    return 0;
  }
  if (e.length === 0 || this.length === 0) {
    return 0;
  }
  if (t < 0) {
    throw new RangeError("targetStart out of bounds");
  }
  if (r < 0 || r >= this.length) {
    throw new RangeError("Index out of range");
  }
  if (o < 0) {
    throw new RangeError("sourceEnd out of bounds");
  }
  if (o > this.length) {
    o = this.length;
  }
  if (e.length - t < o - r) {
    o = e.length - t + r;
  }
  var i = o - r;
  if (this === e && typeof Uint8Array.prototype.copyWithin == "function") {
    this.copyWithin(t, r, o);
  } else if (this === e && r < t && t < o) {
    for (var n = i - 1; n >= 0; --n) {
      e[n + t] = this[n + r];
    }
  } else {
    Uint8Array.prototype.set.call(e, this.subarray(r, o), t);
  }
  return i;
};
nt.prototype.fill = function (e, t, r, o) {
  if (typeof e == "string") {
    if (typeof t == "string") {
      o = t;
      t = 0;
      r = this.length;
    } else if (typeof r == "string") {
      o = r;
      r = this.length;
    }
    if (o !== undefined && typeof o != "string") {
      throw new TypeError("encoding must be a string");
    }
    if (typeof o == "string" && !nt.isEncoding(o)) {
      throw new TypeError("Unknown encoding: " + o);
    }
    if (e.length === 1) {
      var i = e.charCodeAt(0);
      if (o === "utf8" && i < 128 || o === "latin1") {
        e = i;
      }
    }
  } else if (typeof e == "number") {
    e &= 255;
  }
  if (t < 0 || this.length < t || this.length < r) {
    throw new RangeError("Out of range index");
  }
  if (r <= t) {
    return this;
  }
  var n;
  t >>>= 0;
  r = r === undefined ? this.length : r >>> 0;
  e ||= 0;
  if (typeof e == "number") {
    for (n = t; n < r; ++n) {
      this[n] = e;
    }
  } else {
    var s = nt.isBuffer(e) ? e : new nt(e, o);
    var a = s.length;
    if (a === 0) {
      throw new TypeError("The value \"" + e + "\" is invalid for argument \"value\"");
    }
    for (n = 0; n < r - t; ++n) {
      this[n + t] = s[n % a];
    }
  }
  return this;
};
var Kt = /[^+/0-9A-Za-z-_]/g;
function Vt(e) {
  if ((e = (e = e.split("=")[0]).trim().replace(Kt, "")).length < 2) {
    return "";
  }
  while (e.length % 4 != 0) {
    e += "=";
  }
  return e;
}
function Xt(e) {
  if (e < 16) {
    return "0" + e.toString(16);
  } else {
    return e.toString(16);
  }
}
function zt(e, t) {
  var r;
  t = t || Infinity;
  for (var o = e.length, i = null, n = [], s = 0; s < o; ++s) {
    if ((r = e.charCodeAt(s)) > 55295 && r < 57344) {
      if (!i) {
        if (r > 56319) {
          if ((t -= 3) > -1) {
            n.push(239, 191, 189);
          }
          continue;
        }
        if (s + 1 === o) {
          if ((t -= 3) > -1) {
            n.push(239, 191, 189);
          }
          continue;
        }
        i = r;
        continue;
      }
      if (r < 56320) {
        if ((t -= 3) > -1) {
          n.push(239, 191, 189);
        }
        i = r;
        continue;
      }
      r = 65536 + (i - 55296 << 10 | r - 56320);
    } else if (i && (t -= 3) > -1) {
      n.push(239, 191, 189);
    }
    i = null;
    if (r < 128) {
      if ((t -= 1) < 0) {
        break;
      }
      n.push(r);
    } else if (r < 2048) {
      if ((t -= 2) < 0) {
        break;
      }
      n.push(r >> 6 | 192, r & 63 | 128);
    } else if (r < 65536) {
      if ((t -= 3) < 0) {
        break;
      }
      n.push(r >> 12 | 224, r >> 6 & 63 | 128, r & 63 | 128);
    } else {
      if (r >= 1114112) {
        throw new Error("Invalid code point");
      }
      if ((t -= 4) < 0) {
        break;
      }
      n.push(r >> 18 | 240, r >> 12 & 63 | 128, r >> 6 & 63 | 128, r & 63 | 128);
    }
  }
  return n;
}
function jt(e) {
  var t = [];
  for (var r = 0; r < e.length; ++r) {
    t.push(e.charCodeAt(r) & 255);
  }
  return t;
}
function $t(e, t) {
  var r;
  var o;
  var i;
  var n = [];
  for (var s = 0; s < e.length && (t -= 2) >= 0; ++s) {
    o = (r = e.charCodeAt(s)) >> 8;
    i = r % 256;
    n.push(i);
    n.push(o);
  }
  return n;
}
function Jt(e) {
  return Ze.toByteArray(Vt(e));
}
function Yt(e, t, r, o) {
  for (var i = 0; i < o && i + r < t.length && i < e.length; ++i) {
    t[i + r] = e[i];
  }
  return i;
}
function Qt(e) {
  return e instanceof ArrayBuffer || e != null && e.constructor != null && e.constructor.name === "ArrayBuffer" && typeof e.byteLength == "number";
}
function Zt(e) {
  return e != e;
}
function er(e, t, r, o, i) {
  var n;
  var s;
  var a = i * 8 - o - 1;
  var u = (1 << a) - 1;
  var c = u >> 1;
  var l = -7;
  var d = r ? i - 1 : 0;
  var g = r ? -1 : 1;
  var h = e[t + d];
  d += g;
  n = h & (1 << -l) - 1;
  h >>= -l;
  l += a;
  for (; l > 0; l -= 8) {
    n = n * 256 + e[t + d];
    d += g;
  }
  s = n & (1 << -l) - 1;
  n >>= -l;
  l += o;
  for (; l > 0; l -= 8) {
    s = s * 256 + e[t + d];
    d += g;
  }
  if (n === 0) {
    n = 1 - c;
  } else {
    if (n === u) {
      if (s) {
        return NaN;
      } else {
        return (h ? -1 : 1) * Infinity;
      }
    }
    s += Math.pow(2, o);
    n -= c;
  }
  return (h ? -1 : 1) * s * Math.pow(2, n - o);
}
function tr(e, t, r, o, i, n) {
  var s;
  var a;
  var u;
  var c = n * 8 - i - 1;
  var l = (1 << c) - 1;
  var d = l >> 1;
  var g = i === 23 ? Math.pow(2, -24) - Math.pow(2, -77) : 0;
  var h = o ? 0 : n - 1;
  var p = o ? 1 : -1;
  var f = t < 0 || t === 0 && 1 / t < 0 ? 1 : 0;
  t = Math.abs(t);
  if (isNaN(t) || t === Infinity) {
    a = isNaN(t) ? 1 : 0;
    s = l;
  } else {
    s = Math.floor(Math.log(t) / Math.LN2);
    if (t * (u = Math.pow(2, -s)) < 1) {
      s--;
      u *= 2;
    }
    if ((t += s + d >= 1 ? g / u : g * Math.pow(2, 1 - d)) * u >= 2) {
      s++;
      u /= 2;
    }
    if (s + d >= l) {
      a = 0;
      s = l;
    } else if (s + d >= 1) {
      a = (t * u - 1) * Math.pow(2, i);
      s += d;
    } else {
      a = t * Math.pow(2, d - 1) * Math.pow(2, i);
      s = 0;
    }
  }
  for (; i >= 8; i -= 8) {
    e[r + h] = a & 255;
    h += p;
    a /= 256;
  }
  s = s << i | a;
  c += i;
  for (; c > 0; c -= 8) {
    e[r + h] = s & 255;
    h += p;
    s /= 256;
  }
  e[r + h - p] |= f * 128;
}
(function (e) {
  "use strict";

  var t = new RegExp("^.*(" + ["\\+https:\\/\\/developers.google.com\\/\\+\\/web\\/snippet\\/", "googlebot", "baiduspider", "gurujibot", "yandexbot", "slurp", "msnbot", "bingbot", "facebookexternalhit", "linkedinbot", "twitterbot", "slackbot", "telegrambot", "applebot", "pingdom", "tumblr ", "Embedly", "spbot"].join("|") + ").*$");
  function r(e) {
    e = e || {};
    var o = {
      version: false,
      language: false,
      platform: true,
      os: true,
      pixelDepth: true,
      colorDepth: true,
      resolution: false,
      isAuthoritative: true,
      silkAccelerated: true,
      isKindleFire: true,
      isDesktop: true,
      isMobile: true,
      isTablet: true,
      isWindows: true,
      isLinux: true,
      isLinux64: true,
      isChromeOS: true,
      isMac: true,
      isiPad: true,
      isiPhone: true,
      isiPod: true,
      isAndroid: true,
      isSamsung: true,
      isSmartTV: true,
      isRaspberry: true,
      isBlackberry: true,
      isTouchScreen: true,
      isOpera: false,
      isIE: false,
      isEdge: false,
      isIECompatibilityMode: false,
      isSafari: false,
      isFirefox: false,
      isWebkit: false,
      isChrome: false,
      isKonqueror: false,
      isOmniWeb: false,
      isSeaMonkey: false,
      isFlock: false,
      isAmaya: false,
      isPhantomJS: false,
      isEpiphany: false,
      source: false,
      cpuCores: false
    };
    for (var i in e) {
      if (e.hasOwnProperty(i) && o[i] !== undefined) {
        o[i] = e[i];
      }
    }
    this.options = o;
    this.version = "1.0.0";
    this._Versions = {
      Edge: /Edge\/([\d\w\.\-]+)/i,
      Firefox: /firefox\/([\d\w\.\-]+)/i,
      IE: /msie\s([\d\.]+[\d])|trident\/\d+\.\d+;.*[rv:]+(\d+\.\d)/i,
      Chrome: /chrome\/([\d\w\.\-]+)/i,
      Chromium: /(?:chromium|crios)\/([\d\w\.\-]+)/i,
      Safari: /version\/([\d\w\.\-]+)/i,
      Opera: /version\/([\d\w\.\-]+)|OPR\/([\d\w\.\-]+)/i,
      Ps3: /([\d\w\.\-]+)\)\s*$/i,
      Psp: /([\d\w\.\-]+)\)?\s*$/i,
      Amaya: /amaya\/([\d\w\.\-]+)/i,
      SeaMonkey: /seamonkey\/([\d\w\.\-]+)/i,
      OmniWeb: /omniweb\/v([\d\w\.\-]+)/i,
      Flock: /flock\/([\d\w\.\-]+)/i,
      Epiphany: /epiphany\/([\d\w\.\-]+)/i,
      WinJs: /msapphost\/([\d\w\.\-]+)/i,
      PhantomJS: /phantomjs\/([\d\w\.\-]+)/i,
      UC: /UCBrowser\/([\d\w\.]+)/i
    };
    this._Browsers = {
      Edge: /edge/i,
      Amaya: /amaya/i,
      Konqueror: /konqueror/i,
      Epiphany: /epiphany/i,
      SeaMonkey: /seamonkey/i,
      Flock: /flock/i,
      OmniWeb: /omniweb/i,
      Chromium: /chromium|crios/i,
      Chrome: /chrome/i,
      Safari: /safari/i,
      IE: /msie|trident/i,
      Opera: /opera|OPR/i,
      PS3: /playstation 3/i,
      PSP: /playstation portable/i,
      Firefox: /firefox/i,
      WinJs: /msapphost/i,
      PhantomJS: /phantomjs/i,
      UC: /UCBrowser/i
    };
    this._OS = {
      Windows10: /windows nt 10\.0/i,
      Windows81: /windows nt 6\.3/i,
      Windows8: /windows nt 6\.2/i,
      Windows7: /windows nt 6\.1/i,
      UnknownWindows: /windows nt 6\.\d+/i,
      WindowsVista: /windows nt 6\.0/i,
      Windows2003: /windows nt 5\.2/i,
      WindowsXP: /windows nt 5\.1/i,
      Windows2000: /windows nt 5\.0/i,
      WindowsPhone8: /windows phone 8\./,
      OSXCheetah: /os x 10[._]0/i,
      OSXPuma: /os x 10[._]1(\D|$)/i,
      OSXJaguar: /os x 10[._]2/i,
      OSXPanther: /os x 10[._]3/i,
      OSXTiger: /os x 10[._]4/i,
      OSXLeopard: /os x 10[._]5/i,
      OSXSnowLeopard: /os x 10[._]6/i,
      OSXLion: /os x 10[._]7/i,
      OSXMountainLion: /os x 10[._]8/i,
      OSXMavericks: /os x 10[._]9/i,
      OSXYosemite: /os x 10[._]10/i,
      OSXElCapitan: /os x 10[._]11/i,
      OSXSierra: /os x 10[._]12/i,
      Mac: /os x/i,
      Linux: /linux/i,
      Linux64: /linux x86_64/i,
      ChromeOS: /cros/i,
      Wii: /wii/i,
      PS3: /playstation 3/i,
      PSP: /playstation portable/i,
      iPad: /\(iPad.*os (\d+)[._](\d+)/i,
      iPhone: /\(iPhone.*os (\d+)[._](\d+)/i,
      Bada: /Bada\/(\d+)\.(\d+)/i,
      Curl: /curl\/(\d+)\.(\d+)\.(\d+)/i
    };
    this._Platform = {
      Windows: /windows nt/i,
      WindowsPhone: /windows phone/i,
      Mac: /macintosh/i,
      Linux: /linux/i,
      Wii: /wii/i,
      Playstation: /playstation/i,
      iPad: /ipad/i,
      iPod: /ipod/i,
      iPhone: /iphone/i,
      Android: /android/i,
      Blackberry: /blackberry/i,
      Samsung: /samsung/i,
      Curl: /curl/i
    };
    this.DefaultAgent = {
      isAuthoritative: true,
      isMobile: false,
      isTablet: false,
      isiPad: false,
      isiPod: false,
      isiPhone: false,
      isAndroid: false,
      isBlackberry: false,
      isOpera: false,
      isIE: false,
      isEdge: false,
      isIECompatibilityMode: false,
      isSafari: false,
      isFirefox: false,
      isWebkit: false,
      isChrome: false,
      isKonqueror: false,
      isOmniWeb: false,
      isSeaMonkey: false,
      isFlock: false,
      isAmaya: false,
      isPhantomJS: false,
      isEpiphany: false,
      isDesktop: false,
      isWindows: false,
      isLinux: false,
      isLinux64: false,
      isMac: false,
      isChromeOS: false,
      isBada: false,
      isSamsung: false,
      isRaspberry: false,
      isBot: false,
      isCurl: false,
      isAndroidTablet: false,
      isWinJs: false,
      isKindleFire: false,
      isSilk: false,
      isCaptive: false,
      isSmartTV: false,
      isUC: false,
      isTouchScreen: false,
      silkAccelerated: false,
      colorDepth: -1,
      pixelDepth: -1,
      resolution: [],
      cpuCores: -1,
      language: "unknown",
      browser: "unknown",
      version: "unknown",
      os: "unknown",
      platform: "unknown",
      geoIp: {},
      source: "",
      hashInt: function (e) {
        var t;
        var r;
        var o = 0;
        if (e.length === 0) {
          return o;
        }
        t = 0;
        r = e.length;
        for (; t < r; t++) {
          o = (o << 5) - o + e.charCodeAt(t);
          o |= 0;
        }
        return o;
      },
      hashMD5: function (e) {
        function t(e, t) {
          return e << t | e >>> 32 - t;
        }
        function r(e, t) {
          var r;
          var o;
          var i;
          var n;
          var s;
          i = e & 2147483648;
          n = t & 2147483648;
          s = (e & 1073741823) + (t & 1073741823);
          if ((r = e & 1073741824) & (o = t & 1073741824)) {
            return s ^ 2147483648 ^ i ^ n;
          } else if (r | o) {
            if (s & 1073741824) {
              return s ^ 3221225472 ^ i ^ n;
            } else {
              return s ^ 1073741824 ^ i ^ n;
            }
          } else {
            return s ^ i ^ n;
          }
        }
        function o(e, o, i, n, s, a, u) {
          return r(t(e = r(e, r(r(function (e, t, r) {
            return e & t | ~e & r;
          }(o, i, n), s), u)), a), o);
        }
        function i(e, o, i, n, s, a, u) {
          return r(t(e = r(e, r(r(function (e, t, r) {
            return e & r | t & ~r;
          }(o, i, n), s), u)), a), o);
        }
        function n(e, o, i, n, s, a, u) {
          return r(t(e = r(e, r(r(function (e, t, r) {
            return e ^ t ^ r;
          }(o, i, n), s), u)), a), o);
        }
        function s(e, o, i, n, s, a, u) {
          return r(t(e = r(e, r(r(function (e, t, r) {
            return t ^ (e | ~r);
          }(o, i, n), s), u)), a), o);
        }
        function a(e) {
          var t;
          var r = "";
          var o = "";
          for (t = 0; t <= 3; t++) {
            r += (o = "0" + (e >>> t * 8 & 255).toString(16)).substr(o.length - 2, 2);
          }
          return r;
        }
        var u;
        var c;
        var l;
        var d;
        var g;
        var h;
        var p;
        var f;
        var m;
        var v;
        u = function (e) {
          var t;
          for (var r = e.length, o = r + 8, i = ((o - o % 64) / 64 + 1) * 16, n = new Array(i - 1), s = 0, a = 0; a < r;) {
            s = a % 4 * 8;
            n[t = (a - a % 4) / 4] = n[t] | e.charCodeAt(a) << s;
            a++;
          }
          s = a % 4 * 8;
          n[t = (a - a % 4) / 4] = n[t] | 128 << s;
          n[i - 2] = r << 3;
          n[i - 1] = r >>> 29;
          return n;
        }(e = function (e) {
          e = e.replace(/\r\n/g, "\n");
          var t = "";
          for (var r = 0; r < e.length; r++) {
            var o = e.charCodeAt(r);
            if (o < 128) {
              t += String.fromCharCode(o);
            } else if (o > 127 && o < 2048) {
              t += String.fromCharCode(o >> 6 | 192);
              t += String.fromCharCode(o & 63 | 128);
            } else {
              t += String.fromCharCode(o >> 12 | 224);
              t += String.fromCharCode(o >> 6 & 63 | 128);
              t += String.fromCharCode(o & 63 | 128);
            }
          }
          return t;
        }(e));
        p = 1732584193;
        f = 4023233417;
        m = 2562383102;
        v = 271733878;
        c = 0;
        for (; c < u.length; c += 16) {
          l = p;
          d = f;
          g = m;
          h = v;
          f = s(f = s(f = s(f = s(f = n(f = n(f = n(f = n(f = i(f = i(f = i(f = i(f = o(f = o(f = o(f = o(f, m = o(m, v = o(v, p = o(p, f, m, v, u[c + 0], 7, 3614090360), f, m, u[c + 1], 12, 3905402710), p, f, u[c + 2], 17, 606105819), v, p, u[c + 3], 22, 3250441966), m = o(m, v = o(v, p = o(p, f, m, v, u[c + 4], 7, 4118548399), f, m, u[c + 5], 12, 1200080426), p, f, u[c + 6], 17, 2821735955), v, p, u[c + 7], 22, 4249261313), m = o(m, v = o(v, p = o(p, f, m, v, u[c + 8], 7, 1770035416), f, m, u[c + 9], 12, 2336552879), p, f, u[c + 10], 17, 4294925233), v, p, u[c + 11], 22, 2304563134), m = o(m, v = o(v, p = o(p, f, m, v, u[c + 12], 7, 1804603682), f, m, u[c + 13], 12, 4254626195), p, f, u[c + 14], 17, 2792965006), v, p, u[c + 15], 22, 1236535329), m = i(m, v = i(v, p = i(p, f, m, v, u[c + 1], 5, 4129170786), f, m, u[c + 6], 9, 3225465664), p, f, u[c + 11], 14, 643717713), v, p, u[c + 0], 20, 3921069994), m = i(m, v = i(v, p = i(p, f, m, v, u[c + 5], 5, 3593408605), f, m, u[c + 10], 9, 38016083), p, f, u[c + 15], 14, 3634488961), v, p, u[c + 4], 20, 3889429448), m = i(m, v = i(v, p = i(p, f, m, v, u[c + 9], 5, 568446438), f, m, u[c + 14], 9, 3275163606), p, f, u[c + 3], 14, 4107603335), v, p, u[c + 8], 20, 1163531501), m = i(m, v = i(v, p = i(p, f, m, v, u[c + 13], 5, 2850285829), f, m, u[c + 2], 9, 4243563512), p, f, u[c + 7], 14, 1735328473), v, p, u[c + 12], 20, 2368359562), m = n(m, v = n(v, p = n(p, f, m, v, u[c + 5], 4, 4294588738), f, m, u[c + 8], 11, 2272392833), p, f, u[c + 11], 16, 1839030562), v, p, u[c + 14], 23, 4259657740), m = n(m, v = n(v, p = n(p, f, m, v, u[c + 1], 4, 2763975236), f, m, u[c + 4], 11, 1272893353), p, f, u[c + 7], 16, 4139469664), v, p, u[c + 10], 23, 3200236656), m = n(m, v = n(v, p = n(p, f, m, v, u[c + 13], 4, 681279174), f, m, u[c + 0], 11, 3936430074), p, f, u[c + 3], 16, 3572445317), v, p, u[c + 6], 23, 76029189), m = n(m, v = n(v, p = n(p, f, m, v, u[c + 9], 4, 3654602809), f, m, u[c + 12], 11, 3873151461), p, f, u[c + 15], 16, 530742520), v, p, u[c + 2], 23, 3299628645), m = s(m, v = s(v, p = s(p, f, m, v, u[c + 0], 6, 4096336452), f, m, u[c + 7], 10, 1126891415), p, f, u[c + 14], 15, 2878612391), v, p, u[c + 5], 21, 4237533241), m = s(m, v = s(v, p = s(p, f, m, v, u[c + 12], 6, 1700485571), f, m, u[c + 3], 10, 2399980690), p, f, u[c + 10], 15, 4293915773), v, p, u[c + 1], 21, 2240044497), m = s(m, v = s(v, p = s(p, f, m, v, u[c + 8], 6, 1873313359), f, m, u[c + 15], 10, 4264355552), p, f, u[c + 6], 15, 2734768916), v, p, u[c + 13], 21, 1309151649), m = s(m, v = s(v, p = s(p, f, m, v, u[c + 4], 6, 4149444226), f, m, u[c + 11], 10, 3174756917), p, f, u[c + 2], 15, 718787259), v, p, u[c + 9], 21, 3951481745);
          p = r(p, l);
          f = r(f, d);
          m = r(m, g);
          v = r(v, h);
        }
        return (a(p) + a(f) + a(m) + a(v)).toLowerCase();
      }
    };
    this.Agent = {};
    this.getBrowser = function (e) {
      switch (true) {
        case this._Browsers.Edge.test(e):
          this.Agent.isEdge = true;
          return "Edge";
        case this._Browsers.PhantomJS.test(e):
          this.Agent.isPhantomJS = true;
          return "PhantomJS";
        case this._Browsers.Konqueror.test(e):
          this.Agent.isKonqueror = true;
          return "Konqueror";
        case this._Browsers.Amaya.test(e):
          this.Agent.isAmaya = true;
          return "Amaya";
        case this._Browsers.Epiphany.test(e):
          this.Agent.isEpiphany = true;
          return "Epiphany";
        case this._Browsers.SeaMonkey.test(e):
          this.Agent.isSeaMonkey = true;
          return "SeaMonkey";
        case this._Browsers.Flock.test(e):
          this.Agent.isFlock = true;
          return "Flock";
        case this._Browsers.OmniWeb.test(e):
          this.Agent.isOmniWeb = true;
          return "OmniWeb";
        case this._Browsers.Opera.test(e):
          this.Agent.isOpera = true;
          return "Opera";
        case this._Browsers.Chromium.test(e):
          this.Agent.isChrome = true;
          return "Chromium";
        case this._Browsers.Chrome.test(e):
          this.Agent.isChrome = true;
          return "Chrome";
        case this._Browsers.Safari.test(e):
          this.Agent.isSafari = true;
          return "Safari";
        case this._Browsers.WinJs.test(e):
          this.Agent.isWinJs = true;
          return "WinJs";
        case this._Browsers.IE.test(e):
          this.Agent.isIE = true;
          return "IE";
        case this._Browsers.PS3.test(e):
          return "ps3";
        case this._Browsers.PSP.test(e):
          return "psp";
        case this._Browsers.Firefox.test(e):
          this.Agent.isFirefox = true;
          return "Firefox";
        case this._Browsers.UC.test(e):
          this.Agent.isUC = true;
          return "UCBrowser";
        default:
          if (e.indexOf("Mozilla") !== 0 && /^([\d\w\-\.]+)\/[\d\w\.\-]+/i.test(e)) {
            this.Agent.isAuthoritative = false;
            return RegExp.$1;
          } else {
            return "unknown";
          }
      }
    };
    this.getBrowserVersion = function (e) {
      switch (this.Agent.browser) {
        case "Edge":
          if (this._Versions.Edge.test(e)) {
            return RegExp.$1;
          }
          break;
        case "PhantomJS":
          if (this._Versions.PhantomJS.test(e)) {
            return RegExp.$1;
          }
          break;
        case "Chrome":
          if (this._Versions.Chrome.test(e)) {
            return RegExp.$1;
          }
          break;
        case "Chromium":
          if (this._Versions.Chromium.test(e)) {
            return RegExp.$1;
          }
          break;
        case "Safari":
          if (this._Versions.Safari.test(e)) {
            return RegExp.$1;
          }
          break;
        case "Opera":
          if (this._Versions.Opera.test(e)) {
            if (RegExp.$1) {
              return RegExp.$1;
            } else {
              return RegExp.$2;
            }
          }
          break;
        case "Firefox":
          if (this._Versions.Firefox.test(e)) {
            return RegExp.$1;
          }
          break;
        case "WinJs":
          if (this._Versions.WinJs.test(e)) {
            return RegExp.$1;
          }
          break;
        case "IE":
          if (this._Versions.IE.test(e)) {
            if (RegExp.$2) {
              return RegExp.$2;
            } else {
              return RegExp.$1;
            }
          }
          break;
        case "ps3":
          if (this._Versions.Ps3.test(e)) {
            return RegExp.$1;
          }
          break;
        case "psp":
          if (this._Versions.Psp.test(e)) {
            return RegExp.$1;
          }
          break;
        case "Amaya":
          if (this._Versions.Amaya.test(e)) {
            return RegExp.$1;
          }
          break;
        case "Epiphany":
          if (this._Versions.Epiphany.test(e)) {
            return RegExp.$1;
          }
          break;
        case "SeaMonkey":
          if (this._Versions.SeaMonkey.test(e)) {
            return RegExp.$1;
          }
          break;
        case "Flock":
          if (this._Versions.Flock.test(e)) {
            return RegExp.$1;
          }
          break;
        case "OmniWeb":
          if (this._Versions.OmniWeb.test(e)) {
            return RegExp.$1;
          }
          break;
        case "UCBrowser":
          if (this._Versions.UC.test(e)) {
            return RegExp.$1;
          }
          break;
        default:
          if (this.Agent.browser !== "unknown" && new RegExp(this.Agent.browser + "[\\/ ]([\\d\\w\\.\\-]+)", "i").test(e)) {
            return RegExp.$1;
          }
      }
    };
    this.getOS = function (e) {
      switch (true) {
        case this._OS.WindowsVista.test(e):
          this.Agent.isWindows = true;
          return "Windows Vista";
        case this._OS.Windows7.test(e):
          this.Agent.isWindows = true;
          return "Windows 7";
        case this._OS.Windows8.test(e):
          this.Agent.isWindows = true;
          return "Windows 8";
        case this._OS.Windows81.test(e):
          this.Agent.isWindows = true;
          return "Windows 8.1";
        case this._OS.Windows10.test(e):
          this.Agent.isWindows = true;
          return "Windows 10.0";
        case this._OS.Windows2003.test(e):
          this.Agent.isWindows = true;
          return "Windows 2003";
        case this._OS.WindowsXP.test(e):
          this.Agent.isWindows = true;
          return "Windows XP";
        case this._OS.Windows2000.test(e):
          this.Agent.isWindows = true;
          return "Windows 2000";
        case this._OS.WindowsPhone8.test(e):
          return "Windows Phone 8";
        case this._OS.Linux64.test(e):
          this.Agent.isLinux = true;
          this.Agent.isLinux64 = true;
          return "Linux 64";
        case this._OS.Linux.test(e):
          this.Agent.isLinux = true;
          return "Linux";
        case this._OS.ChromeOS.test(e):
          this.Agent.isChromeOS = true;
          return "Chrome OS";
        case this._OS.Wii.test(e):
          return "Wii";
        case this._OS.PS3.test(e):
        case this._OS.PSP.test(e):
          return "Playstation";
        case this._OS.OSXCheetah.test(e):
          this.Agent.isMac = true;
          return "OS X Cheetah";
        case this._OS.OSXPuma.test(e):
          this.Agent.isMac = true;
          return "OS X Puma";
        case this._OS.OSXJaguar.test(e):
          this.Agent.isMac = true;
          return "OS X Jaguar";
        case this._OS.OSXPanther.test(e):
          this.Agent.isMac = true;
          return "OS X Panther";
        case this._OS.OSXTiger.test(e):
          this.Agent.isMac = true;
          return "OS X Tiger";
        case this._OS.OSXLeopard.test(e):
          this.Agent.isMac = true;
          return "OS X Leopard";
        case this._OS.OSXSnowLeopard.test(e):
          this.Agent.isMac = true;
          return "OS X Snow Leopard";
        case this._OS.OSXLion.test(e):
          this.Agent.isMac = true;
          return "OS X Lion";
        case this._OS.OSXMountainLion.test(e):
          this.Agent.isMac = true;
          return "OS X Mountain Lion";
        case this._OS.OSXMavericks.test(e):
          this.Agent.isMac = true;
          return "OS X Mavericks";
        case this._OS.OSXYosemite.test(e):
          this.Agent.isMac = true;
          return "OS X Yosemite";
        case this._OS.OSXElCapitan.test(e):
          this.Agent.isMac = true;
          return "OS X El Capitan";
        case this._OS.OSXSierra.test(e):
          this.Agent.isMac = true;
          return "macOS Sierra";
        case this._OS.Mac.test(e):
          this.Agent.isMac = true;
          return "OS X";
        case this._OS.iPad.test(e):
          this.Agent.isiPad = true;
          return e.match(this._OS.iPad)[0].replace("_", ".");
        case this._OS.iPhone.test(e):
          this.Agent.isiPhone = true;
          return e.match(this._OS.iPhone)[0].replace("_", ".");
        case this._OS.Bada.test(e):
          this.Agent.isBada = true;
          return "Bada";
        case this._OS.Curl.test(e):
          this.Agent.isCurl = true;
          return "Curl";
        default:
          return "unknown";
      }
    };
    this.getPlatform = function (e) {
      switch (true) {
        case this._Platform.Windows.test(e):
          return "Microsoft Windows";
        case this._Platform.WindowsPhone.test(e):
          this.Agent.isWindowsPhone = true;
          return "Microsoft Windows Phone";
        case this._Platform.Mac.test(e):
          return "Apple Mac";
        case this._Platform.Curl.test(e):
          return "Curl";
        case this._Platform.Android.test(e):
          this.Agent.isAndroid = true;
          return "Android";
        case this._Platform.Blackberry.test(e):
          this.Agent.isBlackberry = true;
          return "Blackberry";
        case this._Platform.Linux.test(e):
          return "Linux";
        case this._Platform.Wii.test(e):
          return "Wii";
        case this._Platform.Playstation.test(e):
          return "Playstation";
        case this._Platform.iPad.test(e):
          this.Agent.isiPad = true;
          return "iPad";
        case this._Platform.iPod.test(e):
          this.Agent.isiPod = true;
          return "iPod";
        case this._Platform.iPhone.test(e):
          this.Agent.isiPhone = true;
          return "iPhone";
        case this._Platform.Samsung.test(e):
          this.Agent.isiSamsung = true;
          return "Samsung";
        default:
          return "unknown";
      }
    };
    this.testCompatibilityMode = function () {
      var e = this;
      if (this.Agent.isIE && /Trident\/(\d)\.0/i.test(e.Agent.source)) {
        var t = parseInt(RegExp.$1, 10);
        var r = parseInt(e.Agent.version, 10);
        if (r === 7 && t === 7) {
          e.Agent.isIECompatibilityMode = true;
          e.Agent.version = 11;
        }
        if (r === 7 && t === 6) {
          e.Agent.isIECompatibilityMode = true;
          e.Agent.version = 10;
        }
        if (r === 7 && t === 5) {
          e.Agent.isIECompatibilityMode = true;
          e.Agent.version = 9;
        }
        if (r === 7 && t === 4) {
          e.Agent.isIECompatibilityMode = true;
          e.Agent.version = 8;
        }
      }
    };
    this.testSilk = function () {
      switch (true) {
        case new RegExp("silk", "gi").test(this.Agent.source):
          this.Agent.isSilk = true;
      }
      if (/Silk-Accelerated=true/gi.test(this.Agent.source)) {
        this.Agent.SilkAccelerated = true;
      }
      return !!this.Agent.isSilk && "Silk";
    };
    this.testKindleFire = function () {
      var e = this;
      switch (true) {
        case /KFOT/gi.test(e.Agent.source):
          this.Agent.isKindleFire = true;
          return "Kindle Fire";
        case /KFTT/gi.test(e.Agent.source):
          this.Agent.isKindleFire = true;
          return "Kindle Fire HD";
        case /KFJWI/gi.test(e.Agent.source):
          this.Agent.isKindleFire = true;
          return "Kindle Fire HD 8.9";
        case /KFJWA/gi.test(e.Agent.source):
          this.Agent.isKindleFire = true;
          return "Kindle Fire HD 8.9 4G";
        case /KFSOWI/gi.test(e.Agent.source):
          this.Agent.isKindleFire = true;
          return "Kindle Fire HD 7";
        case /KFTHWI/gi.test(e.Agent.source):
          this.Agent.isKindleFire = true;
          return "Kindle Fire HDX 7";
        case /KFTHWA/gi.test(e.Agent.source):
          this.Agent.isKindleFire = true;
          return "Kindle Fire HDX 7 4G";
        case /KFAPWI/gi.test(e.Agent.source):
          this.Agent.isKindleFire = true;
          return "Kindle Fire HDX 8.9";
        case /KFAPWA/gi.test(e.Agent.source):
          this.Agent.isKindleFire = true;
          return "Kindle Fire HDX 8.9 4G";
        default:
          return false;
      }
    };
    this.testCaptiveNetwork = function () {
      switch (true) {
        case /CaptiveNetwork/gi.test(this.Agent.source):
          this.Agent.isCaptive = true;
          this.Agent.isMac = true;
          this.Agent.platform = "Apple Mac";
          return "CaptiveNetwork";
        default:
          return false;
      }
    };
    this.testMobile = function () {
      var e = this;
      switch (true) {
        case e.Agent.isWindows:
        case e.Agent.isLinux:
        case e.Agent.isMac:
        case e.Agent.isChromeOS:
          e.Agent.isDesktop = true;
          break;
        case e.Agent.isAndroid:
        case e.Agent.isSamsung:
          e.Agent.isMobile = true;
          e.Agent.isDesktop = false;
      }
      switch (true) {
        case e.Agent.isiPad:
        case e.Agent.isiPod:
        case e.Agent.isiPhone:
        case e.Agent.isBada:
        case e.Agent.isBlackberry:
        case e.Agent.isAndroid:
        case e.Agent.isWindowsPhone:
          e.Agent.isMobile = true;
          e.Agent.isDesktop = false;
      }
      if (/mobile/i.test(e.Agent.source)) {
        e.Agent.isMobile = true;
        e.Agent.isDesktop = false;
      }
    };
    this.testTablet = function () {
      var e = this;
      switch (true) {
        case e.Agent.isiPad:
        case e.Agent.isAndroidTablet:
        case e.Agent.isKindleFire:
          e.Agent.isTablet = true;
      }
      if (/tablet/i.test(e.Agent.source)) {
        e.Agent.isTablet = true;
      }
    };
    this.testNginxGeoIP = function (e) {
      var t = this;
      Object.keys(e).forEach(function (r) {
        if (/^GEOIP/i.test(r)) {
          t.Agent.geoIp[r] = e[r];
        }
      });
    };
    this.testBot = function () {
      var e = this;
      var r = t.exec(e.Agent.source.toLowerCase());
      if (r) {
        e.Agent.isBot = r[1];
      } else if (!e.Agent.isAuthoritative) {
        e.Agent.isBot = /bot/i.test(e.Agent.source);
      }
    };
    this.testSmartTV = function () {
      var e = new RegExp("smart-tv|smarttv|googletv|appletv|hbbtv|pov_tv|netcast.tv", "gi").exec(this.Agent.source.toLowerCase());
      if (e) {
        this.Agent.isSmartTV = e[1];
      }
    };
    this.testAndroidTablet = function () {
      if (this.Agent.isAndroid && !/mobile/i.test(this.Agent.source)) {
        this.Agent.isAndroidTablet = true;
      }
    };
    this.testTouchSupport = function () {
      this.Agent.isTouchScreen = "ontouchstart" in window || navigator.maxTouchPoints > 0 || navigator.msMaxTouchPoints > 0;
    };
    this.getLaguage = function () {
      this.Agent.language = (navigator.language || navigator.userLanguage || navigator.browserLanguage || navigator.systemLanguage || "").toLowerCase();
    };
    this.getColorDepth = function () {
      this.Agent.colorDepth = screen.colorDepth || -1;
    };
    this.getScreenResolution = function () {
      this.Agent.resolution = [screen.availWidth, screen.availHeight];
    };
    this.getPixelDepth = function () {
      this.Agent.pixelDepth = screen.pixelDepth || -1;
    };
    this.getCPU = function () {
      this.Agent.cpuCores = navigator.hardwareConcurrency || -1;
    };
    this.reset = function () {
      var e = this;
      for (var t in e.DefaultAgent) {
        if (e.DefaultAgent.hasOwnProperty(t)) {
          e.Agent[t] = e.DefaultAgent[t];
        }
      }
      return e;
    };
    this.parse = function (e) {
      e = e || navigator.userAgent;
      var t = new r();
      t.Agent.source = e.replace(/^\s*/, "").replace(/\s*$/, "");
      t.Agent.os = t.getOS(t.Agent.source);
      t.Agent.platform = t.getPlatform(t.Agent.source);
      t.Agent.browser = t.getBrowser(t.Agent.source);
      t.Agent.version = t.getBrowserVersion(t.Agent.source);
      t.testBot();
      t.testSmartTV();
      t.testMobile();
      t.testAndroidTablet();
      t.testTablet();
      t.testCompatibilityMode();
      t.testSilk();
      t.testKindleFire();
      t.testCaptiveNetwork();
      t.testTouchSupport();
      t.getLaguage();
      t.getColorDepth();
      t.getPixelDepth();
      t.getScreenResolution();
      t.getCPU();
      return t.Agent;
    };
    this.get = function (e) {
      var t = this.parse();
      var r = [];
      for (var o in this.options) {
        if (this.options.hasOwnProperty(o) && this.options[o] === true) {
          r.push(t[o]);
        }
      }
      if (e) {
        r.push(e);
      }
      if (!this.options.resolution && t.isMobile) {
        r.push(t.resolution);
      }
      var i = t.hashMD5(r.join(":"));
      return [i.slice(0, 8), i.slice(8, 12), "4" + i.slice(12, 15), "b" + i.slice(15, 18), i.slice(20)].join("-");
    };
    this.Agent = this.DefaultAgent;
    return this;
  }
  e.DeviceUUID = r;
  new r(navigator.userAgent);
})(this);
var rr = Object.create(xe);
var or = Object.create(Ae);
var ir = Object.create(be);
var nr = Object.create(Oe);
var sr = Object.create(Re);
var ar = Object.create(Ee);
var ur = Object.create(we);
var cr = Object.create(Ie);
var lr = Object.create(Le);
if (r()) {
  rr.init();
} else {
  ir.setChromeExtensionOverrideState(ce.HIDDEN);
}
